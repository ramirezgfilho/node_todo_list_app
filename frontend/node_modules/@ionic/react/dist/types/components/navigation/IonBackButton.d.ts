import { JSX as LocalJSX } from '@ionic/core';
import React from 'react';
import { IonicReactProps } from '../IonicReactProps';
declare type Props = Omit<LocalJSX.IonBackButton, 'icon'> & IonicReactProps & {
    icon?: {
        ios: string;
        md: string;
    };
    ref?: React.RefObject<HTMLIonBackButtonElement>;
};
export declare const IonBackButton: {
    new (props: Readonly<Props>): {
        context: import("../../contexts/NavContext").NavContextState;
        clickButton: (e: React.MouseEvent<Element, MouseEvent>) => void;
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Props>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Props> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    new (props: Props, context?: any): {
        context: import("../../contexts/NavContext").NavContextState;
        clickButton: (e: React.MouseEvent<Element, MouseEvent>) => void;
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Props>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Props> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    readonly displayName: string;
    readonly contextType: React.Context<import("../../contexts/NavContext").NavContextState>;
};
export {};
