/// <reference types="react" />
import { PickerOptions } from '@ionic/core';
export declare const IonPicker: {
    new (props: PickerOptions & import("./createControllerComponent").ReactControllerProps): {
        overlay?: HTMLIonPickerElement | undefined;
        isUnmounted: boolean;
        componentDidMount(): Promise<void>;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: PickerOptions & import("./createControllerComponent").ReactControllerProps): Promise<void>;
        present(prevProps?: (PickerOptions & import("./createControllerComponent").ReactControllerProps) | undefined): Promise<void>;
        render(): null;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<PickerOptions & import("./createControllerComponent").ReactControllerProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<PickerOptions & import("./createControllerComponent").ReactControllerProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
    };
    readonly displayName: string;
    contextType?: import("react").Context<any> | undefined;
};
