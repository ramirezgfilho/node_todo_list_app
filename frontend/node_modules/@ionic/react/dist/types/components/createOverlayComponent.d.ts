import { OverlayEventDetail } from '@ionic/core';
import React from 'react';
interface OverlayElement extends HTMLElement {
    present: () => Promise<void>;
    dismiss: (data?: any, role?: string | undefined) => Promise<boolean>;
}
export interface ReactOverlayProps {
    children?: React.ReactNode;
    isOpen: boolean;
    onDidDismiss?: (event: CustomEvent<OverlayEventDetail>) => void;
}
export declare const createOverlayComponent: <T extends object, OverlayType extends OverlayElement>(displayName: string, controller: {
    create: (options: any) => Promise<OverlayType>;
}) => {
    new (props: T & ReactOverlayProps): {
        overlay?: OverlayType | undefined;
        el: HTMLDivElement;
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: T & ReactOverlayProps): Promise<void>;
        present(prevProps?: (T & ReactOverlayProps) | undefined): Promise<void>;
        render(): React.ReactPortal;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<T & ReactOverlayProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<T & ReactOverlayProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    readonly displayName: string;
    contextType?: React.Context<any> | undefined;
};
export {};
