/// <reference types="react" />
import { ModalOptions } from '@ionic/core';
export declare type ReactModalOptions = Omit<ModalOptions, 'component' | 'componentProps'> & {
    children: React.ReactNode;
};
export declare const IonModal: {
    new (props: Pick<ModalOptions<import("@ionic/core").ComponentRef>, "id" | "mode" | "animated" | "showBackdrop" | "backdropDismiss" | "cssClass" | "delegate" | "keyboardClose" | "enterAnimation" | "leaveAnimation"> & {
        children: import("react").ReactNode;
    } & import("./createOverlayComponent").ReactOverlayProps): {
        overlay?: HTMLIonModalElement | undefined;
        el: HTMLDivElement;
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: Pick<ModalOptions<import("@ionic/core").ComponentRef>, "id" | "mode" | "animated" | "showBackdrop" | "backdropDismiss" | "cssClass" | "delegate" | "keyboardClose" | "enterAnimation" | "leaveAnimation"> & {
            children: import("react").ReactNode;
        } & import("./createOverlayComponent").ReactOverlayProps): Promise<void>;
        present(prevProps?: (Pick<ModalOptions<import("@ionic/core").ComponentRef>, "id" | "mode" | "animated" | "showBackdrop" | "backdropDismiss" | "cssClass" | "delegate" | "keyboardClose" | "enterAnimation" | "leaveAnimation"> & {
            children: import("react").ReactNode;
        } & import("./createOverlayComponent").ReactOverlayProps) | undefined): Promise<void>;
        render(): import("react").ReactPortal;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<ModalOptions<import("@ionic/core").ComponentRef>, "id" | "mode" | "animated" | "showBackdrop" | "backdropDismiss" | "cssClass" | "delegate" | "keyboardClose" | "enterAnimation" | "leaveAnimation"> & {
            children: import("react").ReactNode;
        } & import("./createOverlayComponent").ReactOverlayProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<ModalOptions<import("@ionic/core").ComponentRef>, "id" | "mode" | "animated" | "showBackdrop" | "backdropDismiss" | "cssClass" | "delegate" | "keyboardClose" | "enterAnimation" | "leaveAnimation"> & {
            children: import("react").ReactNode;
        } & import("./createOverlayComponent").ReactOverlayProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
    };
    readonly displayName: string;
    contextType?: import("react").Context<any> | undefined;
};
