import React from 'react';
import { IonicReactProps } from './IonicReactProps';
export declare const IonPage: {
    new (props: Readonly<React.HTMLAttributes<HTMLElement> & IonicReactProps>): {
        context: import("../contexts/NavContext").NavContextState;
        ref: React.RefObject<HTMLDivElement>;
        componentDidMount(): void;
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<React.HTMLAttributes<HTMLElement> & IonicReactProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<React.HTMLAttributes<HTMLElement> & IonicReactProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    new (props: React.HTMLAttributes<HTMLElement> & IonicReactProps, context?: any): {
        context: import("../contexts/NavContext").NavContextState;
        ref: React.RefObject<HTMLDivElement>;
        componentDidMount(): void;
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<React.HTMLAttributes<HTMLElement> & IonicReactProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<React.HTMLAttributes<HTMLElement> & IonicReactProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    readonly displayName: string;
    readonly contextType: React.Context<import("../contexts/NavContext").NavContextState>;
};
