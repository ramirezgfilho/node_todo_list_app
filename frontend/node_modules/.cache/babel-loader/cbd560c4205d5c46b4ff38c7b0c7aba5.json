{"ast":null,"code":"var getPlatforms = function (win) {\n  return setupPlatforms(win);\n};\n\nvar isPlatform = function (winOrPlatform, platform) {\n  if (typeof winOrPlatform === 'string') {\n    platform = winOrPlatform;\n    winOrPlatform = undefined;\n  }\n\n  return getPlatforms(winOrPlatform).includes(platform);\n};\n\nvar setupPlatforms = function (win) {\n  if (win === void 0) {\n    win = window;\n  }\n\n  win.Ionic = win.Ionic || {};\n  var platforms = win.Ionic.platforms;\n\n  if (platforms == null) {\n    platforms = win.Ionic.platforms = detectPlatforms(win);\n    platforms.forEach(function (p) {\n      return win.document.documentElement.classList.add(\"plt-\" + p);\n    });\n  }\n\n  return platforms;\n};\n\nvar detectPlatforms = function (win) {\n  return Object.keys(PLATFORMS_MAP).filter(function (p) {\n    return PLATFORMS_MAP[p](win);\n  });\n};\n\nvar isMobileWeb = function (win) {\n  return isMobile(win) && !isHybrid(win);\n};\n\nvar isIpad = function (win) {\n  // iOS 12 and below\n  if (testUserAgent(win, /iPad/i)) {\n    return true;\n  } // iOS 13+\n\n\n  if (testUserAgent(win, /Macintosh/i) && isMobile(win)) {\n    return true;\n  }\n\n  return false;\n};\n\nvar isIphone = function (win) {\n  return testUserAgent(win, /iPhone/i);\n};\n\nvar isIOS = function (win) {\n  return testUserAgent(win, /iPhone|iPod/i) || isIpad(win);\n};\n\nvar isAndroid = function (win) {\n  return testUserAgent(win, /android|sink/i);\n};\n\nvar isAndroidTablet = function (win) {\n  return isAndroid(win) && !testUserAgent(win, /mobile/i);\n};\n\nvar isPhablet = function (win) {\n  var width = win.innerWidth;\n  var height = win.innerHeight;\n  var smallest = Math.min(width, height);\n  var largest = Math.max(width, height);\n  return smallest > 390 && smallest < 520 && largest > 620 && largest < 800;\n};\n\nvar isTablet = function (win) {\n  var width = win.innerWidth;\n  var height = win.innerHeight;\n  var smallest = Math.min(width, height);\n  var largest = Math.max(width, height);\n  return isIpad(win) || isAndroidTablet(win) || smallest > 460 && smallest < 820 && largest > 780 && largest < 1400;\n};\n\nvar isMobile = function (win) {\n  return matchMedia(win, '(any-pointer:coarse)');\n};\n\nvar isDesktop = function (win) {\n  return !isMobile(win);\n};\n\nvar isHybrid = function (win) {\n  return isCordova(win) || isCapacitorNative(win);\n};\n\nvar isCordova = function (win) {\n  return !!(win['cordova'] || win['phonegap'] || win['PhoneGap']);\n};\n\nvar isCapacitorNative = function (win) {\n  var capacitor = win['Capacitor'];\n  return !!(capacitor && capacitor.isNative);\n};\n\nvar isElectron = function (win) {\n  return testUserAgent(win, /electron/i);\n};\n\nvar isPWA = function (win) {\n  return !!(win.matchMedia('(display-mode: standalone)').matches || win.navigator.standalone);\n};\n\nvar testUserAgent = function (win, expr) {\n  return expr.test(win.navigator.userAgent);\n};\n\nvar matchMedia = function (win, query) {\n  return win.matchMedia(query).matches;\n};\n\nvar PLATFORMS_MAP = {\n  'ipad': isIpad,\n  'iphone': isIphone,\n  'ios': isIOS,\n  'android': isAndroid,\n  'phablet': isPhablet,\n  'tablet': isTablet,\n  'cordova': isCordova,\n  'capacitor': isCapacitorNative,\n  'electron': isElectron,\n  'pwa': isPWA,\n  'mobile': isMobile,\n  'mobileweb': isMobileWeb,\n  'desktop': isDesktop,\n  'hybrid': isHybrid\n};\n\nvar Config =\n/** @class */\nfunction () {\n  function Config() {\n    this.m = new Map();\n  }\n\n  Config.prototype.reset = function (configObj) {\n    this.m = new Map(Object.entries(configObj));\n  };\n\n  Config.prototype.get = function (key, fallback) {\n    var value = this.m.get(key);\n    return value !== undefined ? value : fallback;\n  };\n\n  Config.prototype.getBoolean = function (key, fallback) {\n    if (fallback === void 0) {\n      fallback = false;\n    }\n\n    var val = this.m.get(key);\n\n    if (val === undefined) {\n      return fallback;\n    }\n\n    if (typeof val === 'string') {\n      return val === 'true';\n    }\n\n    return !!val;\n  };\n\n  Config.prototype.getNumber = function (key, fallback) {\n    var val = parseFloat(this.m.get(key));\n    return isNaN(val) ? fallback !== undefined ? fallback : NaN : val;\n  };\n\n  Config.prototype.set = function (key, value) {\n    this.m.set(key, value);\n  };\n\n  return Config;\n}();\n\nvar config =\n/*@__PURE__*/\nnew Config();\n\nvar configFromSession = function (win) {\n  try {\n    var configStr = win.sessionStorage.getItem(IONIC_SESSION_KEY);\n    return configStr !== null ? JSON.parse(configStr) : {};\n  } catch (e) {\n    return {};\n  }\n};\n\nvar saveConfig = function (win, c) {\n  try {\n    win.sessionStorage.setItem(IONIC_SESSION_KEY, JSON.stringify(c));\n  } catch (e) {\n    return;\n  }\n};\n\nvar configFromURL = function (win) {\n  var configObj = {};\n  win.location.search.slice(1).split('&').map(function (entry) {\n    return entry.split('=');\n  }).map(function (_a) {\n    var key = _a[0],\n        value = _a[1];\n    return [decodeURIComponent(key), decodeURIComponent(value)];\n  }).filter(function (_a) {\n    var key = _a[0];\n    return startsWith(key, IONIC_PREFIX);\n  }).map(function (_a) {\n    var key = _a[0],\n        value = _a[1];\n    return [key.slice(IONIC_PREFIX.length), value];\n  }).forEach(function (_a) {\n    var key = _a[0],\n        value = _a[1];\n    configObj[key] = value;\n  });\n  return configObj;\n};\n\nvar startsWith = function (input, search) {\n  return input.substr(0, search.length) === search;\n};\n\nvar IONIC_PREFIX = 'ionic:';\nvar IONIC_SESSION_KEY = 'ionic-persist-config';\nexport { configFromURL as a, config as b, configFromSession as c, saveConfig as d, getPlatforms as g, isPlatform as i, setupPlatforms as s };","map":null,"metadata":{},"sourceType":"module"}