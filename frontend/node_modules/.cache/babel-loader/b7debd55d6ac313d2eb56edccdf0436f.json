{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as getIonMode, d as createEvent, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { i as isEndSide, b as assert, c as clamp } from './helpers-46f4a262.js';\nimport './animation-af478fe9.js';\nimport { GESTURE_CONTROLLER } from './index-624eea58.js';\nimport { m as menuController } from './index-1e5940d5.js';\nimport { c as createColorClasses } from './theme-18cbe2cc.js';\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-2812fda3.js';\n\nvar Menu =\n/** @class */\nfunction () {\n  function class_1(hostRef) {\n    registerInstance(this, hostRef);\n    this.lastOnEnd = 0;\n    this.blocker = GESTURE_CONTROLLER.createBlocker({\n      disableScroll: true\n    });\n    this.mode = getIonMode(this);\n    this.isAnimating = false;\n    this._isOpen = false;\n    this.isPaneVisible = false;\n    this.isEndSide = false;\n    /**\n     * If `true`, the menu is disabled.\n     */\n\n    this.disabled = false;\n    /**\n     * Which side of the view the menu should be placed.\n     */\n\n    this.side = 'start';\n    /**\n     * If `true`, swiping the menu is enabled.\n     */\n\n    this.swipeGesture = true;\n    /**\n     * The edge threshold for dragging the menu open.\n     * If a drag/swipe happens over this value, the menu is not triggered.\n     */\n\n    this.maxEdgeStart = 50;\n    this.ionWillOpen = createEvent(this, \"ionWillOpen\", 7);\n    this.ionWillClose = createEvent(this, \"ionWillClose\", 7);\n    this.ionDidOpen = createEvent(this, \"ionDidOpen\", 7);\n    this.ionDidClose = createEvent(this, \"ionDidClose\", 7);\n    this.ionMenuChange = createEvent(this, \"ionMenuChange\", 7);\n  }\n\n  class_1.prototype.typeChanged = function (type, oldType) {\n    var contentEl = this.contentEl;\n\n    if (contentEl) {\n      if (oldType !== undefined) {\n        contentEl.classList.remove(\"menu-content-\" + oldType);\n      }\n\n      contentEl.classList.add(\"menu-content-\" + type);\n      contentEl.removeAttribute('style');\n    }\n\n    if (this.menuInnerEl) {\n      // Remove effects of previous animations\n      this.menuInnerEl.removeAttribute('style');\n    }\n\n    this.animation = undefined;\n  };\n\n  class_1.prototype.disabledChanged = function () {\n    this.updateState();\n    this.ionMenuChange.emit({\n      disabled: this.disabled,\n      open: this._isOpen\n    });\n  };\n\n  class_1.prototype.sideChanged = function () {\n    this.isEndSide = isEndSide(this.side);\n  };\n\n  class_1.prototype.swipeGestureChanged = function () {\n    this.updateState();\n  };\n\n  class_1.prototype.connectedCallback = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var el, parent, content, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.type === undefined) {\n              this.type = config.get('menuType', this.mode === 'ios' ? 'reveal' : 'overlay');\n            }\n\n            el = this.el;\n            parent = el.parentNode;\n\n            if (this.contentId === undefined) {\n              console.warn(\"[DEPRECATED][ion-menu] Using the [main] attribute is deprecated, please use the \\\"contentId\\\" property instead:\\nBEFORE:\\n  <ion-menu>...</ion-menu>\\n  <div main>...</div>\\n\\nAFTER:\\n  <ion-menu contentId=\\\"my-content\\\"></ion-menu>\\n  <div id=\\\"my-content\\\">...</div>\\n\");\n            }\n\n            content = this.contentId !== undefined ? document.getElementById(this.contentId) : parent && parent.querySelector && parent.querySelector('[main]');\n\n            if (!content || !content.tagName) {\n              // requires content element\n              console.error('Menu: must have a \"content\" element to listen for drag events on.');\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.contentEl = content; // add menu's content classes\n\n            content.classList.add('menu-content');\n            this.typeChanged(this.type, undefined);\n            this.sideChanged(); // register this menu with the app's menu controller\n\n            menuController._register(this);\n\n            _a = this;\n            return [4\n            /*yield*/\n            , import('./index-624eea58.js')];\n\n          case 1:\n            _a.gesture = _b.sent().createGesture({\n              el: document,\n              gestureName: 'menu-swipe',\n              gesturePriority: 30,\n              threshold: 10,\n              canStart: function (ev) {\n                return _this.canStart(ev);\n              },\n              onWillStart: function () {\n                return _this.onWillStart();\n              },\n              onStart: function () {\n                return _this.onStart();\n              },\n              onMove: function (ev) {\n                return _this.onMove(ev);\n              },\n              onEnd: function (ev) {\n                return _this.onEnd(ev);\n              }\n            });\n            this.updateState();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_1.prototype.componentDidLoad = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.ionMenuChange.emit({\n          disabled: this.disabled,\n          open: this._isOpen\n        });\n        this.updateState();\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  class_1.prototype.disconnectedCallback = function () {\n    this.blocker.destroy();\n\n    menuController._unregister(this);\n\n    if (this.animation) {\n      this.animation.destroy();\n    }\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n\n    this.animation = undefined;\n    this.contentEl = this.backdropEl = this.menuInnerEl = undefined;\n  };\n\n  class_1.prototype.onSplitPaneChanged = function (ev) {\n    this.isPaneVisible = ev.detail.isPane(this.el);\n    this.updateState();\n  };\n\n  class_1.prototype.onBackdropClick = function (ev) {\n    if (this._isOpen && this.lastOnEnd < ev.timeStamp - 100) {\n      var shouldClose = ev.composedPath ? !ev.composedPath().includes(this.menuInnerEl) : false;\n\n      if (shouldClose) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.close();\n      }\n    }\n  };\n  /**\n   * Returns `true` is the menu is open.\n   */\n\n\n  class_1.prototype.isOpen = function () {\n    return Promise.resolve(this._isOpen);\n  };\n  /**\n   * Returns `true` is the menu is active.\n   *\n   * A menu is active when it can be opened or closed, meaning it's enabled\n   * and it's not part of a `ion-split-pane`.\n   */\n\n\n  class_1.prototype.isActive = function () {\n    return Promise.resolve(this._isActive());\n  };\n  /**\n   * Opens the menu. If the menu is already open or it can't be opened,\n   * it returns `false`.\n   */\n\n\n  class_1.prototype.open = function (animated) {\n    if (animated === void 0) {\n      animated = true;\n    }\n\n    return this.setOpen(true, animated);\n  };\n  /**\n   * Closes the menu. If the menu is already closed or it can't be closed,\n   * it returns `false`.\n   */\n\n\n  class_1.prototype.close = function (animated) {\n    if (animated === void 0) {\n      animated = true;\n    }\n\n    return this.setOpen(false, animated);\n  };\n  /**\n   * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.\n   * If the operation can't be completed successfully, it returns `false`.\n   */\n\n\n  class_1.prototype.toggle = function (animated) {\n    if (animated === void 0) {\n      animated = true;\n    }\n\n    return this.setOpen(!this._isOpen, animated);\n  };\n  /**\n   * Opens or closes the button.\n   * If the operation can't be completed successfully, it returns `false`.\n   */\n\n\n  class_1.prototype.setOpen = function (shouldOpen, animated) {\n    if (animated === void 0) {\n      animated = true;\n    }\n\n    return menuController._setOpen(this, shouldOpen, animated);\n  };\n\n  class_1.prototype._setOpen = function (shouldOpen, animated) {\n    if (animated === void 0) {\n      animated = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // If the menu is disabled or it is currently being animated, let's do nothing\n            if (!this._isActive() || this.isAnimating || shouldOpen === this._isOpen) {\n              return [2\n              /*return*/\n              , false];\n            }\n\n            this.beforeAnimation(shouldOpen);\n            return [4\n            /*yield*/\n            , this.loadAnimation()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.startAnimation(shouldOpen, animated)];\n\n          case 2:\n            _a.sent();\n\n            this.afterAnimation(shouldOpen);\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n\n  class_1.prototype.loadAnimation = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var width, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            width = this.menuInnerEl.offsetWidth;\n\n            if (width === this.width && this.animation !== undefined) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.width = width; // Destroy existing animation\n\n            if (this.animation) {\n              this.animation.destroy();\n              this.animation = undefined;\n            } // Create new animation\n\n\n            _a = this;\n            return [4\n            /*yield*/\n            , menuController._createAnimation(this.type, this)];\n\n          case 1:\n            // Create new animation\n            _a.animation = _b.sent();\n\n            if (!config.getBoolean('animated', true)) {\n              this.animation.duration(0);\n            }\n\n            this.animation.fill('both');\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_1.prototype.startAnimation = function (shouldOpen, animated) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isReversed, ani;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            isReversed = !shouldOpen;\n            ani = this.animation.direction(isReversed ? 'reverse' : 'normal').easing(isReversed ? 'cubic-bezier(0.4, 0.0, 0.6, 1)' : 'cubic-bezier(0.0, 0.0, 0.2, 1)');\n            if (!animated) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , ani.playAsync()];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            ani.playSync();\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_1.prototype._isActive = function () {\n    return !this.disabled && !this.isPaneVisible;\n  };\n\n  class_1.prototype.canSwipe = function () {\n    return this.swipeGesture && !this.isAnimating && this._isActive();\n  };\n\n  class_1.prototype.canStart = function (detail) {\n    if (!this.canSwipe()) {\n      return false;\n    }\n\n    if (this._isOpen) {\n      return true; // TODO error\n    } else if (menuController._getOpenSync()) {\n      return false;\n    }\n\n    return checkEdgeSide(window, detail.currentX, this.isEndSide, this.maxEdgeStart);\n  };\n\n  class_1.prototype.onWillStart = function () {\n    this.beforeAnimation(!this._isOpen);\n    return this.loadAnimation();\n  };\n\n  class_1.prototype.onStart = function () {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    } // the cloned animation should not use an easing curve during seek\n\n\n    this.animation.direction(this._isOpen ? 'reverse' : 'normal').progressStart(true);\n  };\n\n  class_1.prototype.onMove = function (detail) {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    }\n\n    var delta = computeDelta(detail.deltaX, this._isOpen, this.isEndSide);\n    var stepValue = delta / this.width;\n    this.animation.progressStep(stepValue);\n  };\n\n  class_1.prototype.onEnd = function (detail) {\n    var _this = this;\n\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    }\n\n    var isOpen = this._isOpen;\n    var isEndSide = this.isEndSide;\n    var delta = computeDelta(detail.deltaX, isOpen, isEndSide);\n    var width = this.width;\n    var stepValue = delta / width;\n    var velocity = detail.velocityX;\n    var z = width / 2.0;\n    var shouldCompleteRight = velocity >= 0 && (velocity > 0.2 || detail.deltaX > z);\n    var shouldCompleteLeft = velocity <= 0 && (velocity < -0.2 || detail.deltaX < -z);\n    var shouldComplete = isOpen ? isEndSide ? shouldCompleteRight : shouldCompleteLeft : isEndSide ? shouldCompleteLeft : shouldCompleteRight;\n    var shouldOpen = !isOpen && shouldComplete;\n\n    if (isOpen && !shouldComplete) {\n      shouldOpen = true;\n    }\n\n    this.lastOnEnd = detail.timeStamp; // Account for rounding errors in JS\n\n    var newStepValue = shouldComplete ? 0.001 : -0.001;\n    /**\n     * TODO: stepValue can sometimes return a negative\n     * value, but you can't have a negative time value\n     * for the cubic bezier curve (at least with web animations)\n     * Not sure if the negative step value is an error or not\n     */\n\n    var adjustedStepValue = stepValue <= 0 ? 0.01 : stepValue;\n    /**\n     * Animation will be reversed here, so need to\n     * reverse the easing curve as well\n     *\n     * Additionally, we need to account for the time relative\n     * to the new easing curve, as `stepValue` is going to be given\n     * in terms of a linear curve.\n     */\n\n    newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.4, 0), new Point(0.6, 1), new Point(1, 1), clamp(0, adjustedStepValue, 1));\n    this.animation.easing('cubic-bezier(0.4, 0.0, 0.6, 1)').onFinish(function () {\n      return _this.afterAnimation(shouldOpen);\n    }, {\n      oneTimeCallback: true\n    }).progressEnd(shouldComplete ? 1 : 0, newStepValue, 300);\n  };\n\n  class_1.prototype.beforeAnimation = function (shouldOpen) {\n    assert(!this.isAnimating, '_before() should not be called while animating'); // this places the menu into the correct location before it animates in\n    // this css class doesn't actually kick off any animations\n\n    this.el.classList.add(SHOW_MENU);\n\n    if (this.backdropEl) {\n      this.backdropEl.classList.add(SHOW_BACKDROP);\n    }\n\n    this.blocker.block();\n    this.isAnimating = true;\n\n    if (shouldOpen) {\n      this.ionWillOpen.emit();\n    } else {\n      this.ionWillClose.emit();\n    }\n  };\n\n  class_1.prototype.afterAnimation = function (isOpen) {\n    assert(this.isAnimating, '_before() should be called while animating'); // keep opening/closing the menu disabled for a touch more yet\n    // only add listeners/css if it's enabled and isOpen\n    // and only remove listeners/css if it's not open\n    // emit opened/closed events\n\n    this._isOpen = isOpen;\n    this.isAnimating = false;\n\n    if (!this._isOpen) {\n      this.blocker.unblock();\n    }\n\n    if (isOpen) {\n      // add css class\n      if (this.contentEl) {\n        this.contentEl.classList.add(MENU_CONTENT_OPEN);\n      } // emit open event\n\n\n      this.ionDidOpen.emit();\n    } else {\n      // remove css classes\n      this.el.classList.remove(SHOW_MENU);\n\n      if (this.contentEl) {\n        this.contentEl.classList.remove(MENU_CONTENT_OPEN);\n      }\n\n      if (this.backdropEl) {\n        this.backdropEl.classList.remove(SHOW_BACKDROP);\n      }\n\n      if (this.animation) {\n        this.animation.stop();\n      } // emit close event\n\n\n      this.ionDidClose.emit();\n    }\n  };\n\n  class_1.prototype.updateState = function () {\n    var isActive = this._isActive();\n\n    if (this.gesture) {\n      this.gesture.setDisabled(!isActive || !this.swipeGesture);\n    } // Close menu immediately\n\n\n    if (!isActive && this._isOpen) {\n      // close if this menu is open, and should not be enabled\n      this.forceClosing();\n    }\n\n    if (!this.disabled) {\n      menuController._setActiveMenu(this);\n    }\n\n    assert(!this.isAnimating, 'can not be animating');\n  };\n\n  class_1.prototype.forceClosing = function () {\n    assert(this._isOpen, 'menu cannot be closed');\n    this.isAnimating = true;\n    var ani = this.animation.direction('reverse');\n    ani.playSync();\n    this.afterAnimation(false);\n  };\n\n  class_1.prototype.render = function () {\n    var _a;\n\n    var _this = this;\n\n    var _b = this,\n        isEndSide = _b.isEndSide,\n        type = _b.type,\n        disabled = _b.disabled,\n        mode = _b.mode,\n        isPaneVisible = _b.isPaneVisible;\n\n    return h(Host, {\n      role: \"navigation\",\n      class: (_a = {}, _a[mode] = true, _a[\"menu-type-\" + type] = true, _a['menu-enabled'] = !disabled, _a['menu-side-end'] = isEndSide, _a['menu-side-start'] = !isEndSide, _a['menu-pane-visible'] = isPaneVisible, _a)\n    }, h(\"div\", {\n      class: \"menu-inner\",\n      ref: function (el) {\n        return _this.menuInnerEl = el;\n      }\n    }, h(\"slot\", null)), h(\"ion-backdrop\", {\n      ref: function (el) {\n        return _this.backdropEl = el;\n      },\n      class: \"menu-backdrop\",\n      tappable: false,\n      stopPropagation: false\n    }));\n  };\n\n  Object.defineProperty(class_1.prototype, \"el\", {\n    get: function () {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"watchers\", {\n    get: function () {\n      return {\n        \"type\": [\"typeChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"side\": [\"sideChanged\"],\n        \"swipeGesture\": [\"swipeGestureChanged\"]\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"style\", {\n    get: function () {\n      return \":host{--width:304px;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--background:var(--ion-background-color,#fff);left:0;right:0;top:0;bottom:0;display:none;position:absolute;contain:strict}:host(.show-menu){display:block}.menu-inner{left:0;right:auto;top:0;bottom:0;-webkit-transform:translate3d(-9999px,0,0);transform:translate3d(-9999px,0,0);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);contain:strict}:host-context([dir=rtl]) .menu-inner,[dir=rtl] .menu-inner{left:unset;right:unset;left:auto;right:0;-webkit-transform:translate3d(calc(-1 * -9999px),0,0);transform:translate3d(calc(-1 * -9999px),0,0)}:host(.menu-side-start) .menu-inner{--ion-safe-area-right:0px;right:auto;left:0}:host(.menu-side-end) .menu-inner{--ion-safe-area-left:0px;right:0;left:auto}ion-backdrop{display:none;opacity:.01;z-index:-1}\\@media (max-width:340px){.menu-inner{--width:264px}}:host(.menu-type-reveal){z-index:0}:host(.menu-type-reveal.show-menu) .menu-inner{-webkit-transform:translateZ(0);transform:translateZ(0)}:host(.menu-type-overlay){z-index:1000}:host(.menu-type-overlay) .show-backdrop{display:block;cursor:pointer}:host(.menu-pane-visible) .menu-inner{left:0;right:0;width:auto;-webkit-transform:none!important;transform:none!important;-webkit-box-shadow:none!important;box-shadow:none!important}:host(.menu-pane-visible) ion-backdrop{display:hidden!important}:host(.menu-type-overlay) .menu-inner{-webkit-box-shadow:0 2px 22px 0 rgba(0,0,0,.09),4px 0 16px 0 rgba(0,0,0,.18);box-shadow:0 2px 22px 0 rgba(0,0,0,.09),4px 0 16px 0 rgba(0,0,0,.18)}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return class_1;\n}();\n\nvar computeDelta = function (deltaX, isOpen, isEndSide) {\n  return Math.max(0, isOpen !== isEndSide ? -deltaX : deltaX);\n};\n\nvar checkEdgeSide = function (win, posX, isEndSide, maxEdgeStart) {\n  if (isEndSide) {\n    return posX >= win.innerWidth - maxEdgeStart;\n  } else {\n    return posX <= maxEdgeStart;\n  }\n};\n\nvar SHOW_MENU = 'show-menu';\nvar SHOW_BACKDROP = 'show-backdrop';\nvar MENU_CONTENT_OPEN = 'menu-content-open'; // Given a menu, return whether or not the menu toggle should be visible\n\nvar updateVisibility = function (menu) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var menuEl, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , menuController.get(menu)];\n\n        case 1:\n          menuEl = _b.sent();\n          _a = menuEl;\n          if (!_a) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , menuEl.isActive()];\n\n        case 2:\n          _a = _b.sent();\n          _b.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          , !!_a];\n      }\n    });\n  });\n};\n\nvar MenuButton =\n/** @class */\nfunction () {\n  function class_2(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    this.visible = false;\n    /**\n     * If `true`, the user cannot interact with the menu button.\n     */\n\n    this.disabled = false;\n    /**\n     * Automatically hides the menu button when the corresponding menu is not active\n     */\n\n    this.autoHide = true;\n    /**\n     * The type of the button.\n     */\n\n    this.type = 'button';\n\n    this.onClick = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , menuController.toggle(this.menu)];\n        });\n      });\n    };\n  }\n\n  class_2.prototype.componentDidLoad = function () {\n    this.visibilityChanged();\n  };\n\n  class_2.prototype.visibilityChanged = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , updateVisibility(this.menu)];\n\n          case 1:\n            _a.visible = _b.sent();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_2.prototype.render = function () {\n    var _a;\n\n    var _b = this,\n        color = _b.color,\n        disabled = _b.disabled;\n\n    var mode = getIonMode(this);\n    var menuIcon = config.get('menuIcon', 'menu');\n    var hidden = this.autoHide && !this.visible;\n    var attrs = {\n      type: this.type\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      \"aria-disabled\": disabled ? 'true' : null,\n      \"aria-hidden\": hidden ? 'true' : null,\n      class: Object.assign(Object.assign((_a = {}, _a[mode] = true, _a), createColorClasses(color)), {\n        'button': true,\n        'menu-button-hidden': hidden,\n        'menu-button-disabled': disabled,\n        'ion-activatable': true,\n        'ion-focusable': true\n      })\n    }, h(\"button\", Object.assign({}, attrs, {\n      disabled: disabled,\n      class: \"button-native\"\n    }), h(\"slot\", null, h(\"ion-icon\", {\n      icon: menuIcon,\n      mode: mode,\n      lazy: false\n    })), mode === 'md' && h(\"ion-ripple-effect\", {\n      type: \"unbounded\"\n    })));\n  };\n\n  Object.defineProperty(class_2, \"style\", {\n    get: function () {\n      return \":host{--background:transparent;--color-focused:var(--color);--border-radius:initial;--padding-top:0;--padding-bottom:0;color:var(--color);text-align:center;text-decoration:none;text-overflow:ellipsis;text-transform:none;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:var(--border-radius);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;border:0;outline:none;background:var(--background);line-height:1;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}ion-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;pointer-events:none}:host(.menu-button-hidden){display:none}:host(.menu-button-disabled){cursor:default;opacity:.5;pointer-events:none}\\@media (any-hover:hover){:host(:hover) .button-native{background:var(--background-hover);color:var(--color-hover)}}:host(.ion-focused) .button-native{background:var(--background-focused);color:var(--color-focused)}:host(.ion-color) .button-native{color:var(--ion-color-base)}:host-context(ion-toolbar:not(.ion-color)){color:var(--ion-toolbar-color,var(--color))}:host{--background-focused:rgba(66,66,66,0.24);--background-hover:rgba(66,66,66,0.08);--border-radius:50%;--color:initial;--padding-start:8px;--padding-end:8px;width:48px;height:48px;font-size:24px}\\@media (any-hover:hover){:host(.ion-color:hover) .button-native{background:rgba(var(--ion-color-base-rgb),.08)}}:host(.ion-color.ion-focused) .button-native{background:rgba(var(--ion-color-base-rgb),.24);color:var(--ion-color-base)}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return class_2;\n}();\n\nvar MenuController =\n/** @class */\nfunction () {\n  function class_3(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Open the menu. If a menu is not provided then it will open the first\n   * menu found. If the specified menu is `start` or `end`, then it will open\n   * the enabled menu on that side. Otherwise, it will try to find the menu\n   * using the menu's `id` property. If a menu is not found then it will\n   * return `false`.\n   *\n   * @param menu The menuId or side of the menu to open.\n   */\n\n\n  class_3.prototype.open = function (menu) {\n    return menuController.open(menu);\n  };\n  /**\n   * Close the menu. If a menu is specified, it will close that menu.\n   * If no menu is specified, then it will close any menu that is open.\n   * If it does not find any open menus, it will return `false`.\n   *\n   * @param menu The menuId or side of the menu to close.\n   */\n\n\n  class_3.prototype.close = function (menu) {\n    return menuController.close(menu);\n  };\n  /**\n   * Toggle the menu open or closed. If the menu is already open, it will try to\n   * close the menu, otherwise it will try to open it. Returns `false` if\n   * a menu is not found.\n   *\n   * @param menu The menuId or side of the menu to toggle.\n   */\n\n\n  class_3.prototype.toggle = function (menu) {\n    return menuController.toggle(menu);\n  };\n  /**\n   * Enable or disable a menu. Disabling a menu will not allow gestures\n   * for that menu or any calls to open it. This is useful when there are\n   * multiple menus on the same side and only one of them should be allowed\n   * to open. Enabling a menu will automatically disable all other menus\n   * on that side.\n   *\n   * @param enable If `true`, the menu should be enabled.\n   * @param menu The menuId or side of the menu to enable or disable.\n   */\n\n\n  class_3.prototype.enable = function (enable, menu) {\n    return menuController.enable(enable, menu);\n  };\n  /**\n   * Enable or disable the ability to swipe open the menu.\n   *\n   * @param enable If `true`, the menu swipe gesture should be enabled.\n   * @param menu The menuId or side of the menu to enable or disable the swipe gesture on.\n   */\n\n\n  class_3.prototype.swipeGesture = function (enable, menu) {\n    return menuController.swipeGesture(enable, menu);\n  };\n  /**\n   * Get whether or not the menu is open. Returns `true` if the specified\n   * menu is open. If a menu is not specified, it will return `true` if\n   * any menu is currently open.\n   *\n   * @param menu The menuId or side of the menu that is being checked.\n   */\n\n\n  class_3.prototype.isOpen = function (menu) {\n    return menuController.isOpen(menu);\n  };\n  /**\n   * Get whether or not the menu is enabled. Returns `true` if the\n   * specified menu is enabled. Returns `false` if a menu is disabled\n   * or not found.\n   *\n   * @param menu The menuId or side of the menu that is being checked.\n   */\n\n\n  class_3.prototype.isEnabled = function (menu) {\n    return menuController.isEnabled(menu);\n  };\n  /**\n   * Get a menu instance. If a menu is not provided then it will return the first\n   * menu found. If the specified menu is `start` or `end`, then it will return the\n   * enabled menu on that side. Otherwise, it will try to find the menu using the menu's\n   * `id` property. If a menu is not found then it will return `null`.\n   *\n   * @param menu The menuId or side of the menu.\n   */\n\n\n  class_3.prototype.get = function (menu) {\n    return menuController.get(menu);\n  };\n  /**\n   * Get the instance of the opened menu. Returns `null` if a menu is not found.\n   */\n\n\n  class_3.prototype.getOpen = function () {\n    return menuController.getOpen();\n  };\n  /**\n   * Get all menu instances.\n   */\n\n\n  class_3.prototype.getMenus = function () {\n    return menuController.getMenus();\n  };\n  /**\n   * Get whether or not a menu is animating. Returns `true` if any\n   * menu is currently animating.\n   */\n\n\n  class_3.prototype.isAnimating = function () {\n    return menuController.isAnimating();\n  };\n  /**\n   * Registers a new animation that can be used with any `ion-menu` by\n   * passing the name of the animation in its `type` property.\n   *\n   * @param name The name of the animation to register.\n   * @param animation The animation function to register.\n   */\n\n\n  class_3.prototype.registerAnimation = function (name, animation) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , menuController.registerAnimation(name, animation)];\n      });\n    });\n  };\n\n  return class_3;\n}();\n\nvar MenuToggle =\n/** @class */\nfunction () {\n  function class_4(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    this.visible = false;\n    /**\n     * Automatically hides the content when the corresponding menu is not active.\n     *\n     * By default, it's `true`. Change it to `false` in order to\n     * keep `ion-menu-toggle` always visible regardless the state of the menu.\n     */\n\n    this.autoHide = true;\n\n    this.onClick = function () {\n      return menuController.toggle(_this.menu);\n    };\n  }\n\n  class_4.prototype.connectedCallback = function () {\n    this.visibilityChanged();\n  };\n\n  class_4.prototype.visibilityChanged = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , updateVisibility(this.menu)];\n\n          case 1:\n            _a.visible = _b.sent();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_4.prototype.render = function () {\n    var _a;\n\n    var mode = getIonMode(this);\n    var hidden = this.autoHide && !this.visible;\n    return h(Host, {\n      onClick: this.onClick,\n      \"aria-hidden\": hidden ? 'true' : null,\n      class: (_a = {}, _a[mode] = true, _a['menu-toggle-hidden'] = hidden, _a)\n    }, h(\"slot\", null));\n  };\n\n  Object.defineProperty(class_4, \"style\", {\n    get: function () {\n      return \":host(.menu-toggle-hidden){display:none}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return class_4;\n}();\n\nexport { Menu as ion_menu, MenuButton as ion_menu_button, MenuController as ion_menu_controller, MenuToggle as ion_menu_toggle };","map":null,"metadata":{},"sourceType":"module"}