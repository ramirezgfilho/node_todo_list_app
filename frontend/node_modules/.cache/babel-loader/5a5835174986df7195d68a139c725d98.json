{"ast":null,"code":"import { __rest } from 'tslib';\nimport React from 'react';\nimport { matchPath, Redirect, Route, withRouter, BrowserRouter, HashRouter } from 'react-router-dom';\nimport { NavContext, IonLifeCycleContext, DefaultIonLifeCycleContext, getConfig } from '@ionic/react';\nlet count = 0;\n\nconst generateId = () => (count++).toString();\n\nconst isDevMode = () => {\n  return process && process.env && process.env.NODE_ENV === 'development';\n};\n\nconst RESTRICT_SIZE = 25;\n\nclass LocationHistory {\n  constructor() {\n    this.locationHistory = [];\n  }\n\n  add(location) {\n    this.locationHistory.push(location);\n\n    if (this.locationHistory.length > RESTRICT_SIZE) {\n      this.locationHistory.splice(0, 10);\n    }\n  }\n\n  pop() {\n    this.locationHistory.pop();\n  }\n\n  replace(location) {\n    this.locationHistory.pop();\n    this.locationHistory.push(location);\n  }\n\n  findLastLocationByUrl(url) {\n    for (let i = this.locationHistory.length - 1; i >= 0; i--) {\n      const location = this.locationHistory[i];\n\n      if (location.pathname.toLocaleLowerCase() === url.toLocaleLowerCase()) {\n        return location;\n      }\n    }\n\n    return undefined;\n  }\n\n  previous() {\n    return this.locationHistory[this.locationHistory.length - 2];\n  }\n\n  current() {\n    return this.locationHistory[this.locationHistory.length - 1];\n  }\n\n}\n/**\n * The holistic view of all the Routes configured for an application inside of an IonRouterOutlet.\n */\n\n\nclass ViewStacks {\n  constructor() {\n    this.viewStacks = {};\n  }\n\n  get(key) {\n    return this.viewStacks[key];\n  }\n\n  set(key, viewStack) {\n    this.viewStacks[key] = viewStack;\n  }\n\n  getKeys() {\n    return Object.keys(this.viewStacks);\n  }\n\n  delete(key) {\n    delete this.viewStacks[key];\n  }\n\n  findViewInfoByLocation(location, viewKey) {\n    let view;\n    let match;\n    let viewStack;\n\n    if (viewKey) {\n      viewStack = this.viewStacks[viewKey];\n\n      if (viewStack) {\n        viewStack.views.some(matchView);\n      }\n    } else {\n      const keys = this.getKeys();\n      keys.some(key => {\n        viewStack = this.viewStacks[key];\n        return viewStack.views.some(matchView);\n      });\n    }\n\n    const result = {\n      view,\n      viewStack,\n      match\n    };\n    return result;\n\n    function matchView(v) {\n      const matchProps = {\n        exact: v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      match = matchPath(location.pathname, matchProps);\n\n      if (match) {\n        view = v;\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  findViewInfoById(id = '') {\n    let view;\n    let viewStack;\n    const keys = this.getKeys();\n    keys.some(key => {\n      const vs = this.viewStacks[key];\n      view = vs.views.find(x => x.id === id);\n\n      if (view) {\n        viewStack = vs;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return {\n      view,\n      viewStack\n    };\n  }\n\n}\n\nconst RouteManagerContext =\n/*@__PURE__*/\nReact.createContext({\n  viewStacks: new ViewStacks(),\n  syncView: () => {\n    navContextNotFoundError();\n  },\n  hideView: () => {\n    navContextNotFoundError();\n  },\n  setupIonRouter: () => Promise.reject(navContextNotFoundError()),\n  removeViewStack: () => {\n    navContextNotFoundError();\n  }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n/**\n * The View component helps manage the IonPage's lifecycle and registration\n */\n\n\nclass View extends React.Component {\n  componentDidMount() {\n    /**\n     * If we can tell if view is a redirect, hide it so it will work again in future\n     */\n    const view = this.props.view;\n\n    if (view.route.type === Redirect) {\n      this.props.onHideView(view.id);\n    } else if (view.route.type === Route && view.route.props.render) {\n      if (view.route.props.render().type === Redirect) {\n        this.props.onHideView(view.id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.ionPage) {\n      this.ionPage.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    }\n  }\n\n  ionViewWillEnterHandler() {\n    this.context.ionViewWillEnter();\n  }\n\n  ionViewDidEnterHandler() {\n    this.context.ionViewDidEnter();\n  }\n\n  ionViewWillLeaveHandler() {\n    this.context.ionViewWillLeave();\n  }\n\n  ionViewDidLeaveHandler() {\n    this.context.ionViewDidLeave();\n  }\n\n  registerIonPage(page) {\n    this.ionPage = page;\n    this.ionPage.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    this.ionPage.classList.add('ion-page-invisible');\n\n    if (isDevMode()) {\n      this.ionPage.setAttribute('data-view-id', this.props.view.id);\n    }\n\n    this.props.onViewSync(page, this.props.view.id);\n  }\n\n  render() {\n    return React.createElement(NavContext.Consumer, null, value => {\n      const newProvider = Object.assign({}, value, {\n        registerIonPage: this.registerIonPage.bind(this)\n      });\n      return React.createElement(NavContext.Provider, {\n        value: newProvider\n      }, this.props.children);\n    });\n  }\n\n  static get contextType() {\n    return IonLifeCycleContext;\n  }\n\n}\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\n\n\nclass ViewTransitionManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ionLifeCycleContext = new DefaultIonLifeCycleContext();\n    this._isMounted = false;\n    this.state = {\n      show: true\n    };\n    this.ionLifeCycleContext.onComponentCanBeDestroyed(() => {\n      if (!this.props.mount) {\n        if (this._isMounted) {\n          this.setState({\n            show: false\n          }, () => {\n            this.context.hideView(this.props.id);\n          });\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const show = this.state.show;\n    return React.createElement(IonLifeCycleContext.Provider, {\n      value: this.ionLifeCycleContext\n    }, show && this.props.children);\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n\n}\n\nclass StackManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.routerOutletEl = React.createRef();\n    this.id = this.props.id || generateId();\n    this.handleViewSync = this.handleViewSync.bind(this);\n    this.handleHideView = this.handleHideView.bind(this);\n    this.state = {\n      routerOutletReady: false\n    };\n  }\n\n  componentDidMount() {\n    this.context.setupIonRouter(this.id, this.props.children, this.routerOutletEl.current);\n    this.routerOutletEl.current.addEventListener('routerOutletReady', () => {\n      this.setState({\n        routerOutletReady: true\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.context.removeViewStack(this.id);\n  }\n\n  handleViewSync(page, viewId) {\n    this.context.syncView(page, viewId);\n  }\n\n  handleHideView(viewId) {\n    this.context.hideView(viewId);\n  }\n\n  renderChild(item) {\n    const component = React.cloneElement(item.route, {\n      computedMatch: item.routeData.match\n    });\n    return component;\n  }\n\n  render() {\n    const context = this.context;\n    const viewStack = context.viewStacks.get(this.id);\n    const views = (viewStack || {\n      views: []\n    }).views.filter(x => x.show);\n    const ionRouterOutlet = React.Children.only(this.props.children);\n    const routerOutletReady = this.state.routerOutletReady;\n    const childElements = routerOutletReady ? views.map(view => {\n      return React.createElement(ViewTransitionManager, {\n        id: view.id,\n        key: view.key,\n        mount: view.mount\n      }, React.createElement(View, {\n        onViewSync: this.handleViewSync,\n        onHideView: this.handleHideView,\n        view: view\n      }, this.renderChild(view)));\n    }) : React.createElement(\"div\", null);\n    const elementProps = {\n      ref: this.routerOutletEl\n    };\n\n    if (isDevMode()) {\n      elementProps['data-stack-id'] = this.id;\n    }\n\n    const routerOutletChild = React.cloneElement(ionRouterOutlet, elementProps, childElements);\n    return routerOutletChild;\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n\n}\n\nclass NavManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      goBack: this.goBack.bind(this),\n      hasIonicRouter: () => true,\n      navigate: this.navigate.bind(this),\n      getStackManager: this.getStackManager.bind(this),\n      getPageManager: this.getPageManager.bind(this),\n      currentPath: this.props.location.pathname,\n      registerIonPage: () => {\n        return;\n      },\n      tabNavigate: this.tabNavigate.bind(this)\n    };\n    this.listenUnregisterCallback = this.props.history.listen(location => {\n      this.setState({\n        currentPath: location.pathname\n      });\n    });\n\n    if (document) {\n      document.addEventListener('ionBackButton', e => {\n        e.detail.register(0, () => {\n          this.props.history.goBack();\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  goBack(defaultHref) {\n    this.props.onNavigateBack(defaultHref);\n  }\n\n  navigate(path, direction) {\n    this.props.onNavigate('push', path, direction);\n  }\n\n  tabNavigate(path) {\n    this.props.onNavigate('replace', path, 'back');\n  }\n\n  getPageManager() {\n    return children => children;\n  }\n\n  getStackManager() {\n    return StackManager;\n  }\n\n  render() {\n    return React.createElement(NavContext.Provider, {\n      value: this.state\n    }, this.props.children);\n  }\n\n}\n\nclass RouteManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.locationHistory = new LocationHistory();\n    this.listenUnregisterCallback = this.props.history.listen(this.historyChange.bind(this));\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.navigateBack = this.navigateBack.bind(this);\n    this.state = {\n      viewStacks: new ViewStacks(),\n      hideView: this.hideView.bind(this),\n      setupIonRouter: this.setupIonRouter.bind(this),\n      removeViewStack: this.removeViewStack.bind(this),\n      syncView: this.syncView.bind(this)\n    };\n    this.locationHistory.add({\n      hash: window.location.hash,\n      key: generateId(),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    // Trigger a page change if the location or action is different\n    if (this.state.location && prevState.location !== this.state.location || prevState.action !== this.state.action) {\n      this.setActiveView(this.state.location, this.state.action);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  hideView(viewId) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n\n    const _viewStacks$findViewI = viewStacks.findViewInfoById(viewId),\n          view = _viewStacks$findViewI.view;\n\n    if (view) {\n      view.show = false;\n      view.ionPageElement = undefined;\n      view.isIonRoute = false;\n      view.prevId = undefined;\n      view.key = generateId();\n      this.setState({\n        viewStacks\n      });\n    }\n  }\n\n  historyChange(location, action) {\n    location.state = location.state || {\n      direction: this.currentDirection\n    };\n    this.currentDirection = undefined;\n\n    if (action === 'PUSH') {\n      this.locationHistory.add(location);\n    } else if (action === 'REPLACE' && location.state.direction === 'back' || action === 'POP') {\n      this.locationHistory.pop();\n    } else {\n      this.locationHistory.replace(location);\n    }\n\n    this.setState({\n      location,\n      action\n    });\n  }\n\n  setActiveView(location, action) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    let direction = location.state && location.state.direction || 'forward';\n    let leavingView;\n    const viewStackKeys = viewStacks.getKeys();\n    viewStackKeys.forEach(key => {\n      const _viewStacks$findViewI2 = viewStacks.findViewInfoByLocation(location, key),\n            enteringView = _viewStacks$findViewI2.view,\n            enteringViewStack = _viewStacks$findViewI2.viewStack,\n            match = _viewStacks$findViewI2.match;\n\n      if (!enteringView || !enteringViewStack) {\n        return;\n      }\n\n      leavingView = viewStacks.findViewInfoById(this.activeIonPageId).view;\n\n      if (enteringView.isIonRoute) {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match;\n        this.activeIonPageId = enteringView.id;\n\n        if (leavingView) {\n          if (direction === 'forward') {\n            if (action === 'PUSH') {\n              /**\n               * If the page is being pushed into the stack by another view,\n               * record the view that originally directed to the new view for back button purposes.\n               */\n              enteringView.prevId = leavingView.id;\n            } else if (action === 'POP') {\n              direction = leavingView.prevId === enteringView.id ? 'back' : 'none';\n            } else {\n              direction = direction || 'back';\n              leavingView.mount = false;\n            }\n          }\n\n          if (direction === 'back' || action === 'REPLACE') {\n            leavingView.mount = false;\n            this.removeOrphanedViews(enteringView, enteringViewStack);\n          }\n        } else {\n          // If there is not a leavingView, then we shouldn't provide a direction\n          direction = undefined;\n        }\n      } else {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match;\n      }\n    });\n\n    if (leavingView) {\n      if (!leavingView.isIonRoute) {\n        leavingView.mount = false;\n        leavingView.show = false;\n      }\n    }\n\n    this.setState({\n      viewStacks\n    }, () => {\n      const _this$state$viewStack = this.state.viewStacks.findViewInfoById(this.activeIonPageId),\n            enteringView = _this$state$viewStack.view,\n            viewStack = _this$state$viewStack.viewStack;\n\n      if (enteringView && viewStack) {\n        const enteringEl = enteringView.ionPageElement ? enteringView.ionPageElement : undefined;\n        const leavingEl = leavingView && leavingView.ionPageElement ? leavingView.ionPageElement : undefined;\n\n        if (enteringEl) {\n          // Don't animate from an empty view\n          const navDirection = leavingEl && leavingEl.innerHTML === '' ? undefined : direction === 'none' ? undefined : direction;\n          const shouldGoBack = !!enteringView.prevId || !!this.locationHistory.previous();\n          this.commitView(enteringEl, leavingEl, viewStack.routerOutlet, navDirection, shouldGoBack);\n        } else if (leavingEl) {\n          leavingEl.classList.add('ion-page-hidden');\n          leavingEl.setAttribute('aria-hidden', 'true');\n        } // Warn if an IonPage was not eventually rendered in Dev Mode\n\n\n        if (isDevMode()) {\n          if (enteringView.routeData.match.url !== location.pathname) {\n            setTimeout(() => {\n              const _this$state$viewStack2 = this.state.viewStacks.findViewInfoById(this.activeIonPageId),\n                    view = _this$state$viewStack2.view;\n\n              if (view.routeData.match.url !== location.pathname) {\n                console.warn('No IonPage was found to render. Make sure you wrap your page with an IonPage component.');\n              }\n            }, 100);\n          }\n        }\n      }\n    });\n  }\n\n  removeOrphanedViews(view, viewStack) {\n    // Note: This technique is a bit wonky for views that reference each other and get into a circular loop.\n    // It can still remove a view that probably shouldn't be.\n    const viewsToRemove = viewStack.views.filter(v => v.prevId === view.id);\n    viewsToRemove.forEach(v => {\n      // Don't remove if view is currently active\n      if (v.id !== this.activeIonPageId) {\n        this.removeOrphanedViews(v, viewStack); // If view is not currently visible, go ahead and remove it from DOM\n\n        if (v.ionPageElement.classList.contains('ion-page-hidden')) {\n          v.show = false;\n          v.ionPageElement = undefined;\n          v.isIonRoute = false;\n          v.prevId = undefined;\n          v.key = generateId();\n        }\n\n        v.mount = false;\n      }\n    });\n  }\n\n  setupIonRouter(id, children, routerOutlet) {\n    const views = [];\n    let activeId;\n    const ionRouterOutlet = React.Children.only(children);\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      views.push(createViewItem(child, this.props.history.location));\n    });\n    this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n    function createViewItem(child, location) {\n      const viewId = generateId();\n      const key = generateId();\n      const route = child;\n      const matchProps = {\n        exact: child.props.exact,\n        path: child.props.path || child.props.from,\n        component: child.props.component\n      };\n      const match = matchPath(location.pathname, matchProps);\n      const view = {\n        id: viewId,\n        key,\n        routeData: {\n          match,\n          childProps: child.props\n        },\n        route,\n        mount: true,\n        show: !!match,\n        isIonRoute: false\n      };\n\n      if (match && view.isIonRoute) {\n        activeId = viewId;\n      }\n\n      return view;\n    }\n  }\n\n  registerViewStack(stack, activeId, stackItems, routerOutlet, _location) {\n    this.setState(prevState => {\n      const prevViewStacks = Object.assign(new ViewStacks(), prevState.viewStacks);\n      const newStack = {\n        id: stack,\n        views: stackItems,\n        routerOutlet\n      };\n\n      if (activeId) {\n        this.activeIonPageId = activeId;\n      }\n\n      prevViewStacks.set(stack, newStack);\n      return {\n        viewStacks: prevViewStacks\n      };\n    }, () => {\n      this.setupRouterOutlet(routerOutlet);\n    });\n  }\n\n  async setupRouterOutlet(routerOutlet) {\n    const waitUntilReady = async () => {\n      if (routerOutlet.componentOnReady) {\n        routerOutlet.dispatchEvent(new Event('routerOutletReady'));\n        return;\n      } else {\n        setTimeout(() => {\n          waitUntilReady();\n        }, 0);\n      }\n    };\n\n    await waitUntilReady();\n\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n\n      if (swipeEnabled) {\n        const _this$state$viewStack3 = this.state.viewStacks.findViewInfoById(this.activeIonPageId),\n              view = _this$state$viewStack3.view;\n\n        return !!(view && view.prevId);\n      } else {\n        return false;\n      }\n    };\n\n    const onStart = () => {\n      this.navigateBack();\n    };\n\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: _shouldContinue => true\n    };\n  }\n\n  removeViewStack(stack) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    viewStacks.delete(stack);\n    this.setState({\n      viewStacks\n    });\n  }\n\n  syncView(page, viewId) {\n    this.setState(state => {\n      const viewStacks = Object.assign(new ViewStacks(), state.viewStacks);\n\n      const _viewStacks$findViewI3 = viewStacks.findViewInfoById(viewId),\n            view = _viewStacks$findViewI3.view;\n\n      view.ionPageElement = page;\n      view.isIonRoute = true;\n      return {\n        viewStacks\n      };\n    }, () => {\n      this.setActiveView(this.state.location || this.props.location, this.state.action);\n    });\n  }\n\n  async commitView(enteringEl, leavingEl, ionRouterOuter, direction, showGoBack) {\n    if (enteringEl === leavingEl) {\n      return;\n    }\n\n    await ionRouterOuter.commit(enteringEl, leavingEl, {\n      deepWait: true,\n      duration: direction === undefined ? 0 : undefined,\n      direction,\n      showGoBack,\n      progressAnimation: false\n    });\n\n    if (leavingEl && enteringEl !== leavingEl) {\n      /** add hidden attributes */\n      leavingEl.classList.add('ion-page-hidden');\n      leavingEl.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  handleNavigate(type, path, direction) {\n    this.currentDirection = direction;\n\n    if (type === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n\n  navigateBack(defaultHref) {\n    const _this$state$viewStack4 = this.state.viewStacks.findViewInfoById(this.activeIonPageId),\n          activeIonPage = _this$state$viewStack4.view;\n\n    if (activeIonPage) {\n      const _this$state$viewStack5 = this.state.viewStacks.findViewInfoById(activeIonPage.prevId),\n            enteringView = _this$state$viewStack5.view;\n\n      if (enteringView) {\n        const lastLocation = this.locationHistory.findLastLocationByUrl(enteringView.routeData.match.url);\n\n        if (lastLocation) {\n          this.handleNavigate('replace', lastLocation.pathname + lastLocation.search, 'back');\n        } else {\n          this.handleNavigate('replace', enteringView.routeData.match.url, 'back');\n        }\n      } else {\n        const currentLocation = this.locationHistory.previous();\n\n        if (currentLocation) {\n          this.handleNavigate('replace', currentLocation.pathname + currentLocation.search, 'back');\n        } else {\n          if (defaultHref) {\n            this.handleNavigate('replace', defaultHref, 'back');\n          }\n        }\n      }\n    } else {\n      if (defaultHref) {\n        this.handleNavigate('replace', defaultHref, 'back');\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(RouteManagerContext.Provider, {\n      value: this.state\n    }, React.createElement(NavManager, Object.assign({}, this.props, {\n      onNavigateBack: this.navigateBack,\n      onNavigate: this.handleNavigate\n    }), this.props.children));\n  }\n\n}\n\nconst RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n\nclass IonReactRouter extends React.Component {\n  render() {\n    const _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(BrowserRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n  }\n\n}\n\nclass IonReactHashRouter extends React.Component {\n  render() {\n    const _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(HashRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n  }\n\n}\n\nexport { IonReactHashRouter, IonReactRouter };","map":null,"metadata":{},"sourceType":"module"}