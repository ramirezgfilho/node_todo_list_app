{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { b as config } from './config-3c7f3790.js';\nvar lastId = 0;\n\nvar createController = function (tagName) {\n  return {\n    create: function (options) {\n      return createOverlay(tagName, options);\n    },\n    dismiss: function (data, role, id) {\n      return dismissOverlay(document, data, role, tagName, id);\n    },\n    getTop: function () {\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , getOverlay(document, tagName)];\n        });\n      });\n    }\n  };\n};\n\nvar alertController =\n/*@__PURE__*/\ncreateController('ion-alert');\nvar actionSheetController =\n/*@__PURE__*/\ncreateController('ion-action-sheet');\nvar loadingController =\n/*@__PURE__*/\ncreateController('ion-loading');\nvar modalController =\n/*@__PURE__*/\ncreateController('ion-modal');\nvar pickerController =\n/*@__PURE__*/\ncreateController('ion-picker');\nvar popoverController =\n/*@__PURE__*/\ncreateController('ion-popover');\nvar toastController =\n/*@__PURE__*/\ncreateController('ion-toast');\n\nvar prepareOverlay = function (el) {\n  var doc = document;\n  connectListeners(doc);\n  var overlayIndex = lastId++;\n  el.overlayIndex = overlayIndex;\n\n  if (!el.hasAttribute('id')) {\n    el.id = \"ion-overlay-\" + overlayIndex;\n  }\n};\n\nvar createOverlay = function (tagName, opts) {\n  return customElements.whenDefined(tagName).then(function () {\n    var doc = document;\n    var element = doc.createElement(tagName);\n    element.classList.add('overlay-hidden'); // convert the passed in overlay options into props\n    // that get passed down into the new overlay\n\n    Object.assign(element, opts); // append the overlay element to the document body\n\n    getAppRoot(doc).appendChild(element);\n    return element.componentOnReady();\n  });\n};\n\nvar connectListeners = function (doc) {\n  if (lastId === 0) {\n    lastId = 1; // trap focus inside overlays\n\n    doc.addEventListener('focusin', function (ev) {\n      var lastOverlay = getOverlay(doc);\n\n      if (lastOverlay && lastOverlay.backdropDismiss && !isDescendant(lastOverlay, ev.target)) {\n        var firstInput = lastOverlay.querySelector('input,button');\n\n        if (firstInput) {\n          firstInput.focus();\n        }\n      }\n    }); // handle back-button click\n\n    doc.addEventListener('ionBackButton', function (ev) {\n      var lastOverlay = getOverlay(doc);\n\n      if (lastOverlay && lastOverlay.backdropDismiss) {\n        ev.detail.register(100, function () {\n          return lastOverlay.dismiss(undefined, BACKDROP);\n        });\n      }\n    }); // handle ESC to close overlay\n\n    doc.addEventListener('keyup', function (ev) {\n      if (ev.key === 'Escape') {\n        var lastOverlay = getOverlay(doc);\n\n        if (lastOverlay && lastOverlay.backdropDismiss) {\n          lastOverlay.dismiss(undefined, BACKDROP);\n        }\n      }\n    });\n  }\n};\n\nvar dismissOverlay = function (doc, data, role, overlayTag, id) {\n  var overlay = getOverlay(doc, overlayTag, id);\n\n  if (!overlay) {\n    return Promise.reject('overlay does not exist');\n  }\n\n  return overlay.dismiss(data, role);\n};\n\nvar getOverlays = function (doc, selector) {\n  if (selector === undefined) {\n    selector = 'ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover,ion-toast';\n  }\n\n  return Array.from(doc.querySelectorAll(selector)).filter(function (c) {\n    return c.overlayIndex > 0;\n  });\n};\n\nvar getOverlay = function (doc, overlayTag, id) {\n  var overlays = getOverlays(doc, overlayTag);\n  return id === undefined ? overlays[overlays.length - 1] : overlays.find(function (o) {\n    return o.id === id;\n  });\n};\n\nvar present = function (overlay, name, iosEnterAnimation, mdEnterAnimation, opts) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var animationBuilder, completed;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (overlay.presented) {\n            return [2\n            /*return*/\n            ];\n          }\n\n          overlay.presented = true;\n          overlay.willPresent.emit();\n          animationBuilder = overlay.enterAnimation ? overlay.enterAnimation : config.get(name, overlay.mode === 'ios' ? iosEnterAnimation : mdEnterAnimation);\n          return [4\n          /*yield*/\n          , overlayAnimation(overlay, animationBuilder, overlay.el, opts)];\n\n        case 1:\n          completed = _a.sent();\n\n          if (completed) {\n            overlay.didPresent.emit();\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};\n\nvar dismiss = function (overlay, data, role, name, iosLeaveAnimation, mdLeaveAnimation, opts) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var animationBuilder, err_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!overlay.presented) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          overlay.presented = false;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          overlay.willDismiss.emit({\n            data: data,\n            role: role\n          });\n          animationBuilder = overlay.leaveAnimation ? overlay.leaveAnimation : config.get(name, overlay.mode === 'ios' ? iosLeaveAnimation : mdLeaveAnimation);\n          return [4\n          /*yield*/\n          , overlayAnimation(overlay, animationBuilder, overlay.el, opts)];\n\n        case 2:\n          _a.sent();\n\n          overlay.didDismiss.emit({\n            data: data,\n            role: role\n          });\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          err_1 = _a.sent();\n          console.error(err_1);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          overlay.el.remove();\n          return [2\n          /*return*/\n          , true];\n      }\n    });\n  });\n};\n\nvar getAppRoot = function (doc) {\n  return doc.querySelector('ion-app') || doc.body;\n};\n\nvar overlayAnimation = function (overlay, animationBuilder, baseEl, opts) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var aniRoot, animation, isAnimationBuilder, mod, err_2, animationResult, hasCompleted;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (overlay.animation) {\n            overlay.animation.destroy();\n            overlay.animation = undefined;\n            return [2\n            /*return*/\n            , false];\n          } // Make overlay visible in case it's hidden\n\n\n          baseEl.classList.remove('overlay-hidden');\n          aniRoot = baseEl.shadowRoot || overlay.el;\n          isAnimationBuilder = true;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 4,, 5]);\n\n          return [4\n          /*yield*/\n          , import('./index-69c37885.js')];\n\n        case 2:\n          mod = _a.sent();\n          return [4\n          /*yield*/\n          , mod.create(animationBuilder, aniRoot, opts)];\n\n        case 3:\n          animation = _a.sent();\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          err_2 = _a.sent();\n          animation = animationBuilder(aniRoot, opts);\n          animation.fill('both');\n          isAnimationBuilder = false;\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          overlay.animation = animation;\n\n          if (!overlay.animated || !config.getBoolean('animated', true)) {\n            animation.duration(0);\n          }\n\n          if (overlay.keyboardClose) {\n            animation.beforeAddWrite(function () {\n              var activeElement = baseEl.ownerDocument.activeElement;\n\n              if (activeElement && activeElement.matches('input, ion-input, ion-textarea')) {\n                activeElement.blur();\n              }\n            });\n          }\n\n          return [4\n          /*yield*/\n          , animation.playAsync()];\n\n        case 6:\n          animationResult = _a.sent();\n          hasCompleted = typeof animationResult === 'undefined' ? true : animation.hasCompleted;\n\n          if (isAnimationBuilder) {\n            animation.destroy();\n          }\n\n          overlay.animation = undefined;\n          return [2\n          /*return*/\n          , hasCompleted];\n      }\n    });\n  });\n};\n\nvar eventMethod = function (element, eventName) {\n  var resolve;\n  var promise = new Promise(function (r) {\n    return resolve = r;\n  });\n  onceEvent(element, eventName, function (event) {\n    resolve(event.detail);\n  });\n  return promise;\n};\n\nvar onceEvent = function (element, eventName, callback) {\n  var handler = function (ev) {\n    element.removeEventListener(eventName, handler);\n    callback(ev);\n  };\n\n  element.addEventListener(eventName, handler);\n};\n\nvar isCancel = function (role) {\n  return role === 'cancel' || role === BACKDROP;\n};\n\nvar isDescendant = function (parent, child) {\n  while (child) {\n    if (child === parent) {\n      return true;\n    }\n\n    child = child.parentElement;\n  }\n\n  return false;\n};\n\nvar defaultGate = function (h) {\n  return h();\n};\n\nvar safeCall = function (handler, arg) {\n  if (typeof handler === 'function') {\n    var jmp = config.get('_zoneGate', defaultGate);\n    return jmp(function () {\n      try {\n        return handler(arg);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  return undefined;\n};\n\nvar BACKDROP = 'backdrop';\nexport { BACKDROP as B, alertController as a, actionSheetController as b, popoverController as c, prepareOverlay as d, present as e, dismiss as f, eventMethod as g, createOverlay as h, isCancel as i, dismissOverlay as j, getOverlay as k, loadingController as l, modalController as m, pickerController as p, safeCall as s, toastController as t };","map":null,"metadata":{},"sourceType":"module"}