{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar _this = this;\n\nvar NAMESPACE = 'ionicons';\nvar win = window;\nvar doc = document;\nvar plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: function (h) {\n    return h();\n  },\n  raf: function (h) {\n    return requestAnimationFrame(h);\n  },\n  ael: function (el, eventName, listener, opts) {\n    return el.addEventListener(eventName, listener, opts);\n  },\n  rel: function (el, eventName, listener, opts) {\n    return el.removeEventListener(eventName, listener, opts);\n  }\n};\nvar supportsShadowDom = !!doc.documentElement.attachShadow;\n\nvar supportsConstructibleStylesheets =\n/*@__PURE__*/\nfunction () {\n  try {\n    new CSSStyleSheet();\n    return true;\n  } catch (e) {}\n\n  return false;\n}();\n\nvar hostRefs = new WeakMap();\n\nvar getHostRef = function (ref) {\n  return hostRefs.get(ref);\n};\n\nvar registerInstance = function (lazyInstance, hostRef) {\n  return hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n};\n\nvar registerHost = function (elm) {\n  {\n    var hostRef_1 = {\n      $flags$: 0,\n      $hostElement$: elm,\n      $instanceValues$: new Map()\n    };\n    hostRef_1.$onReadyPromise$ = new Promise(function (r) {\n      return hostRef_1.$onReadyResolve$ = r;\n    });\n    return hostRefs.set(elm, hostRef_1);\n  }\n};\n\nvar isMemberInElement = function (elm, memberName) {\n  return memberName in elm;\n};\n\nvar consoleError = function (e) {\n  return console.error(e);\n};\n\nvar moduleCache =\n/*@__PURE__*/\nnew Map();\n\nvar loadModule = function (cmpMeta, hostRef, hmrVersionId) {\n  // loadModuleImport\n  var exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  var bundleId = cmpMeta.$lazyBundleIds$;\n  var module = moduleCache.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  \"./\" + bundleId + \".entry.js\" + '').then(function (importedModule) {\n    {\n      moduleCache.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nvar styles = new Map();\nvar cssVarShim =\n/*@__PURE__*/\nwin.__stencil_cssshim;\nvar queueCongestion = 0;\nvar queuePending = false;\nvar queueDomReads = [];\nvar queueDomWrites = [];\nvar queueDomWritesLow = [];\n\nvar queueTask = function (queue, write) {\n  return function (cb) {\n    queue.push(cb);\n\n    if (!queuePending) {\n      queuePending = true;\n\n      if (write && plt.$flags$ & 4\n      /* queueSync */\n      ) {\n          nextTick(flush);\n        } else {\n        plt.raf(flush);\n      }\n    }\n  };\n};\n\nvar consume = function (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nvar consumeTimeout = function (queue, timeout) {\n  var i = 0;\n  var ts = 0;\n\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\n\nvar flush = function () {\n  queueCongestion++; // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n\n  consume(queueDomReads);\n  var timeout = (plt.$flags$ & 6\n  /* queueMask */\n  ) === 2\n  /* appLoaded */\n  ? performance.now() + 10 * Math.ceil(queueCongestion * (1.0 / 22.0)) : Infinity; // DOM WRITES!!!\n\n  consumeTimeout(queueDomWrites, timeout);\n  consumeTimeout(queueDomWritesLow, timeout);\n\n  if (queueDomWrites.length > 0) {\n    queueDomWritesLow.push.apply(queueDomWritesLow, queueDomWrites);\n    queueDomWrites.length = 0;\n  }\n\n  if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n    // still more to do yet, but we've run out of time\n    // let's let this thing cool off and try again in the next tick\n    plt.raf(flush);\n  } else {\n    queueCongestion = 0;\n  }\n};\n\nvar nextTick =\n/*@__PURE__*/\nfunction (cb) {\n  return Promise.resolve().then(cb);\n};\n\nvar writeTask =\n/*@__PURE__*/\nqueueTask(queueDomWrites, true);\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\nvar EMPTY_OBJ = {};\n\nvar isDef = function (v) {\n  return v != null;\n};\n\nvar toLowerCase = function (str) {\n  return str.toLowerCase();\n};\n\nvar isComplexType = function (o) {\n  return ['object', 'function'].includes(typeof o);\n};\n\nfunction getDynamicImportFunction(namespace) {\n  return \"__sc_import_\" + namespace.replace(/\\s|-/g, '_');\n}\n\nvar patchEsm = function () {\n  // @ts-ignore\n  if (!(win.CSS && win.CSS.supports && win.CSS.supports('color', 'var(--c)'))) {\n    // @ts-ignore\n    return import('./css-shim-3ea8955c-3ea8955c.js');\n  }\n\n  return Promise.resolve();\n};\n\nvar patchBrowser = function () {\n  return __awaiter(_this, void 0, void 0, function () {\n    var importMeta, scriptElm, resourcesUrl;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          importMeta = \"\";\n          if (!(importMeta !== '')) return [3\n          /*break*/\n          , 1];\n          return [2\n          /*return*/\n          , Promise.resolve(new URL('.', importMeta).href)];\n\n        case 1:\n          scriptElm = Array.from(doc.querySelectorAll('script')).find(function (s) {\n            return s.src.includes(\"/\" + NAMESPACE + \".esm.js\") || s.getAttribute('data-namespace') === NAMESPACE;\n          });\n          resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href));\n          patchDynamicImport(resourcesUrl.href);\n          if (!!window.customElements) return [3\n          /*break*/\n          , 3]; // @ts-ignore\n\n          return [4\n          /*yield*/\n          , import('./dom-860d8016-860d8016.js')];\n\n        case 2:\n          // @ts-ignore\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          , resourcesUrl.href];\n      }\n    });\n  });\n};\n\nvar patchDynamicImport = function (base) {\n  var importFunctionName = getDynamicImportFunction(NAMESPACE);\n\n  try {\n    win[importFunctionName] = new Function('w', 'return import(w);');\n  } catch (e) {\n    var moduleMap_1 = new Map();\n\n    win[importFunctionName] = function (src) {\n      var url = new URL(src, base).href;\n      var mod = moduleMap_1.get(url);\n\n      if (!mod) {\n        var script_1 = doc.createElement('script');\n        script_1.type = 'module';\n        script_1.src = URL.createObjectURL(new Blob([\"import * as m from '\" + url + \"'; window.\" + importFunctionName + \".m = m;\"], {\n          type: 'application/javascript'\n        }));\n        mod = new Promise(function (resolve) {\n          script_1.onload = function () {\n            resolve(win[importFunctionName].m);\n            script_1.remove();\n          };\n        });\n        moduleMap_1.set(url, mod);\n        doc.head.appendChild(script_1);\n      }\n\n      return mod;\n    };\n  }\n};\n\nvar HYDRATED_CLASS = 'hydrated';\nvar rootAppliedStyles = new WeakMap();\n\nvar registerStyle = function (scopeId, cssText, allowCS) {\n  var style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nvar addStyle = function (styleContainerNode, cmpMeta, mode, hostElm) {\n  var scopeId = getScopeId(cmpMeta.$tagName$);\n  var style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      var appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      var styleElm = void 0;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        {\n          if (cssVarShim) {\n            styleElm = cssVarShim.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10\n            /* needsScopedEncapsulation */\n            ));\n            var newScopeId = styleElm['s-sc'];\n\n            if (newScopeId) {\n              scopeId = newScopeId; // we don't want to add this styleID to the appliedStyles Set\n              // since the cssVarShim might need to apply several different\n              // stylesheets for the same component\n\n              appliedStyles = null;\n            }\n          } else {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = styleContainerNode.adoptedStyleSheets.concat([style]);\n    }\n  }\n\n  return scopeId;\n};\n\nvar attachStyles = function (elm, cmpMeta, mode) {\n  var styleId = addStyle(supportsShadowDom && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, mode, elm);\n\n  if (cmpMeta.$flags$ & 10\n  /* needsScopedEncapsulation */\n  ) {\n      // only required when we're NOT using native shadow dom (slot)\n      // or this browser doesn't support native shadow dom\n      // and this host element was NOT created with SSR\n      // let's pick out the inner content for slot projection\n      // create a node to represent where the original\n      // content was first placed, which is useful later on\n      // DOM WRITE!!\n      elm['s-sc'] = styleId;\n      elm.classList.add(styleId + '-h');\n    }\n};\n\nvar getScopeId = function (tagName, mode) {\n  return 'sc-' + tagName;\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nvar h = function (nodeName, vnodeData) {\n  var children = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    children[_i - 2] = arguments[_i];\n  }\n\n  var child = null;\n  var simple = false;\n  var lastSimple = false;\n  var key;\n  var vNodeChildren = [];\n\n  var walk = function (c) {\n    for (var i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? {\n            $flags$: 0,\n            $text$: child\n          } : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n\n  if (vnodeData) {\n    // normalize class / classname attributes\n    {\n      key = vnodeData.key || undefined;\n    }\n    {\n      var classData_1 = vnodeData.className || vnodeData.class;\n\n      if (classData_1) {\n        vnodeData.class = typeof classData_1 !== 'object' ? classData_1 : Object.keys(classData_1).filter(function (k) {\n          return classData_1[k];\n        }).join(' ');\n      }\n    }\n  }\n\n  if (typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData, vNodeChildren, vdomFnUtils);\n  }\n\n  var vnode = {\n    $flags$: 0,\n    $tag$: nodeName,\n    $children$: vNodeChildren.length > 0 ? vNodeChildren : null,\n    $elm$: undefined,\n    $attrs$: vnodeData\n  };\n  {\n    vnode.$key$ = key;\n  }\n  return vnode;\n};\n\nvar Host = {};\n\nvar isHost = function (node) {\n  return node && node.$tag$ === Host;\n};\n\nvar vdomFnUtils = {\n  'forEach': function (children, cb) {\n    return children.map(convertToPublic).forEach(cb);\n  },\n  'map': function (children, cb) {\n    return children.map(convertToPublic).map(cb).map(convertToPrivate);\n  }\n};\n\nvar convertToPublic = function (node) {\n  return {\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$\n  };\n};\n\nvar convertToPrivate = function (node) {\n  return {\n    $flags$: 0,\n    $attrs$: node.vattrs,\n    $children$: node.vchildren,\n    $key$: node.vkey,\n    $name$: node.vname,\n    $tag$: node.vtag,\n    $text$: node.vtext\n  };\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nvar setAccessor = function (elm, memberName, oldValue, newValue, isSvg, flags) {\n  if (oldValue === newValue) {\n    return;\n  }\n\n  if (memberName === 'class' && !isSvg) {\n    // Class\n    {\n      var oldList_1 = parseClassList(oldValue);\n      var baseList_1 = parseClassList(elm.className).filter(function (item) {\n        return !oldList_1.includes(item);\n      });\n      elm.className = baseList_1.concat(parseClassList(newValue).filter(function (item) {\n        return !baseList_1.includes(item);\n      })).join(' ');\n    }\n  } else if (memberName === 'style') {\n    // update style attribute, css properties and values\n    {\n      for (var prop in oldValue) {\n        if (!newValue || newValue[prop] == null) {\n          if (prop.includes('-')) {\n            elm.style.removeProperty(prop);\n          } else {\n            elm.style[prop] = '';\n          }\n        }\n      }\n    }\n\n    for (var prop in newValue) {\n      if (!oldValue || newValue[prop] !== oldValue[prop]) {\n        if (prop.includes('-')) {\n          elm.style.setProperty(prop, newValue[prop]);\n        } else {\n          elm.style[prop] = newValue[prop];\n        }\n      }\n    }\n  } else if (memberName === 'key') ;else if (memberName === 'ref') {\n    // minifier will clean this up\n    if (newValue) {\n      newValue(elm);\n    }\n  } else if (memberName.startsWith('on') && !isMemberInElement(elm, memberName)) {\n    // Event Handlers\n    // so if the member name starts with \"on\" and the 3rd characters is\n    // a capital letter, and it's not already a member on the element,\n    // then we're assuming it's an event listener\n    if (isMemberInElement(elm, toLowerCase(memberName))) {\n      // standard event\n      // the JSX attribute could have been \"onMouseOver\" and the\n      // member name \"onmouseover\" is on the element's prototype\n      // so let's add the listener \"mouseover\", which is all lowercased\n      memberName = toLowerCase(memberName.substring(2));\n    } else {\n      // custom event\n      // the JSX attribute could have been \"onMyCustomEvent\"\n      // so let's trim off the \"on\" prefix and lowercase the first character\n      // and add the listener \"myCustomEvent\"\n      // except for the first character, we keep the event name case\n      memberName = toLowerCase(memberName[2]) + memberName.substring(3);\n    }\n\n    if (oldValue) {\n      plt.rel(elm, memberName, oldValue, false);\n    }\n\n    if (newValue) {\n      plt.ael(elm, memberName, newValue, false);\n    }\n  } else {\n    // Set property if it exists and it's not a SVG\n    var isProp = isMemberInElement(elm, memberName);\n    var isComplex = isComplexType(newValue);\n\n    if ((isProp || isComplex && newValue !== null) && !isSvg) {\n      try {\n        elm[memberName] = newValue == null && elm.tagName.indexOf('-') === -1 ? '' : newValue;\n      } catch (e) {}\n    }\n\n    if (newValue == null || newValue === false) {\n      {\n        elm.removeAttribute(memberName);\n      }\n    } else if ((!isProp || flags & 4\n    /* isHost */\n    || isSvg) && !isComplex) {\n      newValue = newValue === true ? '' : newValue.toString();\n      {\n        elm.setAttribute(memberName, newValue);\n      }\n    }\n  }\n};\n\nvar parseClassList = function (value) {\n  return !value ? [] : value.split(' ');\n};\n\nvar updateElement = function (oldVnode, newVnode, isSvgMode, memberName) {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  var elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  var oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  var newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (newVnodeAttrs[memberName] == null && oldVnodeAttrs[memberName] != null) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nvar scopeId;\nvar hostTagName;\nvar isSvgMode = false;\n\nvar createElm = function (oldParentVNode, newParentVNode, childIndex, parentElm) {\n  // tslint:disable-next-line: prefer-const\n  var newVNode = newParentVNode.$children$[childIndex];\n  var i = 0;\n  var elm;\n  var childNode;\n\n  if (isDef(newVNode.$text$)) {\n    // create text node\n    newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else {\n    // create element\n    elm = newVNode.$elm$ = doc.createElement(newVNode.$tag$); // add css classes, attrs, props, listeners, etc.\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n  }\n\n  return newVNode.$elm$;\n};\n\nvar addVnodes = function (parentElm, before, parentVNode, vnodes, startIdx, endIdx) {\n  var containerElm = parentElm;\n  var childNode;\n\n  if (containerElm.shadowRoot && toLowerCase(containerElm.tagName) === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, before);\n      }\n    }\n  }\n};\n\nvar removeVnodes = function (vnodes, startIdx, endIdx, elm) {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (isDef(vnodes[startIdx])) {\n      elm = vnodes[startIdx].$elm$;\n      callNodeRefs(vnodes[startIdx], true); // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nvar updateChildren = function (parentElm, oldCh, newVNode, newCh) {\n  var oldStartIdx = 0;\n  var newStartIdx = 0;\n  var idxInOld = 0;\n  var i = 0;\n  var oldEndIdx = oldCh.length - 1;\n  var oldStartVnode = oldCh[0];\n  var oldEndVnode = oldCh[oldEndIdx];\n  var newEndIdx = newCh.length - 1;\n  var newStartVnode = newCh[0];\n  var newEndVnode = newCh[newEndIdx];\n  var node;\n  var elmToMove;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // createKeyToOldIdx\n      idxInOld = -1;\n      {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && isDef(oldCh[i].$key$) && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n\n      if (idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld);\n        } else {\n          patch(elmToMove, newStartVnode);\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nvar isSameVnode = function (vnode1, vnode2) {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    {\n      return vnode1.$key$ === vnode2.$key$;\n    }\n    return true;\n  }\n\n  return false;\n};\n\nvar patch = function (oldVNode, newVNode) {\n  var elm = newVNode.$elm$ = oldVNode.$elm$;\n  var oldChildren = oldVNode.$children$;\n  var newChildren = newVNode.$children$;\n\n  if (!isDef(newVNode.$text$)) {\n    // element node\n    {\n      {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (isDef(oldChildren) && isDef(newChildren)) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (isDef(newChildren)) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (isDef(oldVNode.$text$)) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (isDef(oldChildren)) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n  } else if (oldVNode.$text$ !== newVNode.$text$) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.textContent = newVNode.$text$;\n  }\n};\n\nvar callNodeRefs = function (vNode, isDestroy) {\n  if (vNode) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(isDestroy ? null : vNode.$elm$);\n    vNode.$children$ && vNode.$children$.forEach(function (vChild) {\n      callNodeRefs(vChild, isDestroy);\n    });\n  }\n};\n\nvar renderVdom = function (hostElm, hostRef, cmpMeta, renderFnResults) {\n  hostTagName = toLowerCase(hostElm.tagName);\n  var oldVNode = hostRef.$vnode$ || {\n    $flags$: 0\n  };\n  var rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n\n  if (cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.forEach(function (_a) {\n      var propName = _a[0],\n          attribute = _a[1];\n      return rootVnode.$attrs$[attribute] = hostElm[propName];\n    });\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n};\n\nvar safeCall = function (instance, method, arg) {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nvar then = function (promise, thenFn) {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nvar scheduleUpdate = function (elm, hostRef, cmpMeta, isInitialLoad) {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n  var instance = hostRef.$lazyInstance$;\n  var promise; // there is no ancestorc omponent or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  var update = function () {\n    return updateComponent(elm, hostRef, cmpMeta, instance, isInitialLoad);\n  };\n\n  return then(promise, function () {\n    return writeTask(update);\n  });\n};\n\nvar updateComponent = function (elm, hostRef, cmpMeta, instance, isInitialLoad) {\n  // updateComponent\n  {\n    hostRef.$flags$ &= ~16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(elm, cmpMeta, hostRef.$modeName$);\n  }\n\n  {\n    {\n      // tell the platform we're actively rendering\n      // if a value is changed within a render() then\n      // this tells the platform not to queue the change\n      hostRef.$flags$ |= 4\n      /* isActiveRender */\n      ;\n\n      try {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        renderVdom(elm, hostRef, cmpMeta, instance.render());\n      } catch (e) {\n        consoleError(e);\n      }\n\n      hostRef.$flags$ &= ~4\n      /* isActiveRender */\n      ;\n    }\n  }\n\n  if (cssVarShim) {\n    cssVarShim.updateHost(elm);\n  }\n\n  {\n    hostRef.$flags$ |= 2\n    /* hasRendered */\n    ;\n  }\n  postUpdateComponent(elm, hostRef);\n};\n\nvar postUpdateComponent = function (elm, hostRef, ancestorsActivelyLoadingChildren) {\n  if (!elm['s-al']) {\n    var ancestorComponent = hostRef.$ancestorComponent$;\n\n    if (!(hostRef.$flags$ & 64\n    /* hasLoadedComponent */\n    )) {\n      hostRef.$flags$ |= 64\n      /* hasLoadedComponent */\n      ;\n      {\n        // DOM WRITE!\n        // add the css class that this element has officially hydrated\n        elm.classList.add(HYDRATED_CLASS);\n      }\n      {\n        hostRef.$onReadyResolve$(elm);\n      }\n\n      if (!ancestorComponent) {\n        // on appload\n        // we have finish the first big initial render\n        doc.documentElement.classList.add(HYDRATED_CLASS);\n        {\n          setTimeout(function () {\n            return plt.$flags$ |= 2;\n          }\n          /* appLoaded */\n          , 999);\n        }\n      }\n    } // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n\n  }\n};\n\nvar forceUpdate = function (elm, cmpMeta) {\n  {\n    var hostRef = getHostRef(elm);\n\n    if (hostRef.$flags$ & 2\n    /* hasRendered */\n    ) {\n        scheduleUpdate(elm, hostRef, cmpMeta, false);\n      }\n  }\n};\n\nvar disconnectedCallback = function (elm) {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    var hostRef = getHostRef(elm); // clear CSS var-shim tracking\n\n    if (cssVarShim) {\n      cssVarShim.removeHost(elm);\n    }\n\n    var instance = hostRef.$lazyInstance$;\n    {\n      safeCall(instance, 'disconnectedCallback');\n    }\n  }\n};\n\nvar parsePropertyValue = function (propValue, propType) {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n        // per the HTML spec, any string value means it is a boolean true value\n        // but we'll cheat here and say that the string \"false\" is the boolean false\n        return propValue === 'false' ? false : propValue === '' || !!propValue;\n      }\n\n    if (propType & 1\n    /* String */\n    ) {\n        // could have been passed as a number or boolean\n        // but we still want it as a string\n        return String(propValue);\n      } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nvar getValue = function (ref, propName) {\n  return getHostRef(ref).$instanceValues$.get(propName);\n};\n\nvar setValue = function (ref, propName, newVal, cmpMeta) {\n  // check our new property value against our internal value\n  var hostRef = getHostRef(ref);\n  var elm = hostRef.$hostElement$;\n  var oldVal = hostRef.$instanceValues$.get(propName);\n  var flags = hostRef.$flags$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n\n  if (newVal !== oldVal && (!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined)) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (hostRef.$lazyInstance$) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n          var watchMethods = cmpMeta.$watchers$[propName];\n\n          if (watchMethods) {\n            // this instance is watching for when this property changed\n            watchMethods.forEach(function (watchMethodName) {\n              try {\n                // fire off each of the watch methods that are watching this property\n                hostRef.$lazyInstance$[watchMethodName].call(hostRef.$lazyInstance$, newVal, oldVal, propName);\n              } catch (e) {\n                consoleError(e);\n              }\n            });\n          }\n        }\n\n      if ((flags & (4\n      /* isActiveRender */\n      | 2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n          // looks like this value actually changed, so we've got work to do!\n          // but only if we've already rendered, otherwise just chill out\n          // queue that we need to do an update, but don't worry about queuing\n          // up millions cuz this function ensures it only runs once\n          scheduleUpdate(elm, hostRef, cmpMeta, false);\n        }\n    }\n  }\n};\n\nvar proxyComponent = function (Cstr, cmpMeta, flags) {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    var members = Object.entries(cmpMeta.$members$);\n    var prototype_1 = Cstr.prototype;\n    members.forEach(function (_a) {\n      var memberName = _a[0],\n          memberFlags = _a[1][0];\n\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype_1, memberName, {\n          get: function () {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set: function (newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n        var attrNameToPropName_1 = new Map();\n\n        prototype_1.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n          var _this = this;\n\n          plt.jmp(function () {\n            var propName = attrNameToPropName_1.get(attrName);\n            _this[propName] = newValue === null && typeof _this[propName] === 'boolean' ? false : newValue;\n          });\n        }; // create an array of attributes to observe\n        // and also create a map of html attribute name to js property name\n\n\n        Cstr.observedAttributes = members.filter(function (_a) {\n          var _ = _a[0],\n              m = _a[1];\n          return m[0] & 15;\n        }\n        /* HasAttribute */\n        ) // filter to only keep props that should match attributes\n        .map(function (_a) {\n          var propName = _a[0],\n              m = _a[1];\n          var attrName = m[1] || propName;\n          attrNameToPropName_1.set(attrName, propName);\n\n          if (m[0] & 512\n          /* ReflectAttr */\n          ) {\n              cmpMeta.$attrsToReflect$.push([propName, attrName]);\n            }\n\n          return attrName;\n        });\n      }\n  }\n\n  return Cstr;\n};\n\nvar getMode = function (ref) {\n  return getHostRef(ref).$modeName$;\n};\n\nvar initializeComponent = function (elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var style_1, scopeId_1, schedule;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!((hostRef.$flags$ & 32\n          /* hasInitializedComponent */\n          ) === 0)) return [3\n          /*break*/\n          , 5]; // we haven't initialized this element yet\n\n          hostRef.$flags$ |= 32\n          /* hasInitializedComponent */\n          ; // lazy loaded components\n          // request the component's implementation to be\n          // wired up with the host element\n\n          Cstr = loadModule(cmpMeta);\n          if (!Cstr.then) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , Cstr];\n\n        case 1:\n          // Await creates a micro-task avoid if possible\n          Cstr = _a.sent();\n          _a.label = 2;\n\n        case 2:\n          if (!Cstr.isProxied) {\n            // we'eve never proxied this Constructor before\n            // let's add the getters/setters to its prototype before\n            // the first time we create an instance of the implementation\n            {\n              cmpMeta.$watchers$ = Cstr.watchers;\n            }\n            proxyComponent(Cstr, cmpMeta, 2\n            /* proxyState */\n            );\n            Cstr.isProxied = true;\n          } // ok, time to construct the instance\n          // but let's keep track of when we start and stop\n          // so that the getters/setters don't incorrectly step on data\n\n\n          {\n            hostRef.$flags$ |= 8\n            /* isConstructingInstance */\n            ;\n          } // construct the lazy-loaded component implementation\n          // passing the hostRef is very important during\n          // construction in order to directly wire together the\n          // host element and the lazy-loaded instance\n\n          try {\n            new Cstr(hostRef);\n          } catch (e) {\n            consoleError(e);\n          }\n\n          {\n            hostRef.$flags$ &= ~8\n            /* isConstructingInstance */\n            ;\n          }\n          {\n            hostRef.$flags$ |= 128\n            /* isWatchReady */\n            ;\n          }\n          fireConnectedCallback(hostRef.$lazyInstance$);\n          if (!(!Cstr.isStyleRegistered && Cstr.style)) return [3\n          /*break*/\n          , 5];\n          style_1 = Cstr.style;\n          scopeId_1 = getScopeId(cmpMeta.$tagName$);\n          if (!(cmpMeta.$flags$ & 8)\n          /* needsShadowDomShim */\n          ) return [3\n            /*break*/\n            , 4];\n          /* needsShadowDomShim */\n\n          return [4\n          /*yield*/\n          , import('./shadow-css-984bac74-549b16dd.js').then(function (m) {\n            return m.scopeCss(style_1, scopeId_1, false);\n          })];\n\n        case 3:\n          style_1 = _a.sent();\n          _a.label = 4;\n\n        case 4:\n          registerStyle(scopeId_1, style_1, !!(cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ));\n          Cstr.isStyleRegistered = true;\n          _a.label = 5;\n\n        case 5:\n          schedule = function () {\n            return scheduleUpdate(elm, hostRef, cmpMeta, true);\n          };\n\n          {\n            schedule();\n          }\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};\n\nvar fireConnectedCallback = function (instance) {\n  {\n    safeCall(instance, 'connectedCallback');\n  }\n};\n\nvar connectedCallback = function (elm, cmpMeta) {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    // connectedCallback\n    var hostRef = getHostRef(elm);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ; // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).forEach(function (_a) {\n          var memberName = _a[0],\n              memberFlags = _a[1][0];\n\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            var value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    }\n\n    fireConnectedCallback(hostRef.$lazyInstance$);\n  }\n};\n\nvar bootstrapLazy = function (lazyBundles, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var cmpTags = [];\n  var exclude = options.exclude || [];\n  var head = doc.head;\n  var customElements = win.customElements;\n  var y =\n  /*@__PURE__*/\n  head.querySelector('meta[charset]');\n  var visibilityStyle =\n  /*@__PURE__*/\n  doc.createElement('style');\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n\n  if (options.syncQueue) {\n    plt.$flags$ |= 4\n    /* queueSync */\n    ;\n  }\n\n  lazyBundles.forEach(function (lazyBundle) {\n    return lazyBundle[1].forEach(function (compactMeta) {\n      var cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      {\n        cmpMeta.$watchers$ = {};\n      }\n\n      if (!supportsShadowDom && cmpMeta.$flags$ & 1\n      /* shadowDomEncapsulation */\n      ) {\n          cmpMeta.$flags$ |= 8\n          /* needsShadowDomShim */\n          ;\n        }\n\n      var tagName = cmpMeta.$tagName$;\n\n      var HostElement =\n      /** @class */\n      function (_super) {\n        __extends(class_1, _super); // StencilLazyHost\n\n\n        function class_1(self) {\n          var _this = // @ts-ignore\n          _super.call(this, self) || this;\n\n          self = _this;\n          registerHost(self);\n\n          if (cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n              // this component is using shadow dom\n              // and this browser supports shadow dom\n              // add the read-only property \"shadowRoot\" to the host element\n              if (supportsShadowDom) {\n                self.attachShadow({\n                  'mode': 'open'\n                });\n              } else if (!('shadowRoot' in self)) {\n                self.shadowRoot = self;\n              }\n            }\n\n          return _this;\n        }\n\n        class_1.prototype.connectedCallback = function () {\n          var _this = this;\n\n          plt.jmp(function () {\n            return connectedCallback(_this, cmpMeta);\n          });\n        };\n\n        class_1.prototype.disconnectedCallback = function () {\n          var _this = this;\n\n          plt.jmp(function () {\n            return disconnectedCallback(_this);\n          });\n        };\n\n        class_1.prototype['s-init'] = function () {\n          var hostRef = getHostRef(this);\n\n          if (hostRef.$lazyInstance$) {\n            postUpdateComponent(this, hostRef);\n          }\n        };\n\n        class_1.prototype['s-hmr'] = function (hmrVersionId) {};\n\n        class_1.prototype.forceUpdate = function () {\n          forceUpdate(this, cmpMeta);\n        };\n\n        class_1.prototype.componentOnReady = function () {\n          return getHostRef(this).$onReadyPromise$;\n        };\n\n        return class_1;\n      }(HTMLElement);\n\n      cmpMeta.$lazyBundleIds$ = lazyBundle[0];\n\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n        /* isElementConstructor */\n        ));\n      }\n    });\n  }); // visibilityStyle.innerHTML = cmpTags.map(t => `${t}:not(.hydrated)`) + '{display:none}';\n\n  visibilityStyle.innerHTML = cmpTags + '{visibility:hidden}.hydrated{visibility:inherit}';\n  visibilityStyle.setAttribute('data-styles', '');\n  head.insertBefore(visibilityStyle, y ? y.nextSibling : head.firstChild);\n};\n\nvar getAssetPath = function (path) {\n  var assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\n\nvar getElement = function (ref) {\n  return getHostRef(ref).$hostElement$;\n};\n\nexport { Host as H, patchEsm as a, bootstrapLazy as b, getMode as c, getElement as d, getAssetPath as g, h, patchBrowser as p, registerInstance as r };","map":null,"metadata":{},"sourceType":"module"}