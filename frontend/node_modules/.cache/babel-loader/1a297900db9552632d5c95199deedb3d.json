{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as getIonMode, d as createEvent, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport './helpers-46f4a262.js';\nimport { c as createAnimation } from './animation-af478fe9.js';\nimport './constants-3c3e1099.js';\nimport { B as BACKDROP, d as prepareOverlay, e as present, f as dismiss, g as eventMethod } from './overlays-10640d86.js';\nimport { g as getClassMap } from './theme-18cbe2cc.js';\nimport { a as attachComponent, d as detachComponent } from './framework-delegate-c2e2e1f4.js';\nimport { d as deepReady } from './index-4d91f03a.js';\n/**\n * iOS Popover Enter Animation\n */\n\nvar iosEnterAnimation = function (baseEl, ev) {\n  var originY = 'top';\n  var originX = 'left';\n  var contentEl = baseEl.querySelector('.popover-content');\n  var contentDimentions = contentEl.getBoundingClientRect();\n  var contentWidth = contentDimentions.width;\n  var contentHeight = contentDimentions.height;\n  var bodyWidth = baseEl.ownerDocument.defaultView.innerWidth;\n  var bodyHeight = baseEl.ownerDocument.defaultView.innerHeight; // If ev was passed, use that for target element\n\n  var targetDim = ev && ev.target && ev.target.getBoundingClientRect();\n  var targetTop = targetDim != null && 'top' in targetDim ? targetDim.top : bodyHeight / 2 - contentHeight / 2;\n  var targetLeft = targetDim != null && 'left' in targetDim ? targetDim.left : bodyWidth / 2;\n  var targetWidth = targetDim && targetDim.width || 0;\n  var targetHeight = targetDim && targetDim.height || 0;\n  var arrowEl = baseEl.querySelector('.popover-arrow');\n  var arrowDim = arrowEl.getBoundingClientRect();\n  var arrowWidth = arrowDim.width;\n  var arrowHeight = arrowDim.height;\n\n  if (targetDim == null) {\n    arrowEl.style.display = 'none';\n  }\n\n  var arrowCSS = {\n    top: targetTop + targetHeight,\n    left: targetLeft + targetWidth / 2 - arrowWidth / 2\n  };\n  var popoverCSS = {\n    top: targetTop + targetHeight + (arrowHeight - 1),\n    left: targetLeft + targetWidth / 2 - contentWidth / 2\n  }; // If the popover left is less than the padding it is off screen\n  // to the left so adjust it, else if the width of the popover\n  // exceeds the body width it is off screen to the right so adjust\n  //\n\n  var checkSafeAreaLeft = false;\n  var checkSafeAreaRight = false; // If the popover left is less than the padding it is off screen\n  // to the left so adjust it, else if the width of the popover\n  // exceeds the body width it is off screen to the right so adjust\n  // 25 is a random/arbitrary number. It seems to work fine for ios11\n  // and iPhoneX. Is it perfect? No. Does it work? Yes.\n\n  if (popoverCSS.left < POPOVER_IOS_BODY_PADDING + 25) {\n    checkSafeAreaLeft = true;\n    popoverCSS.left = POPOVER_IOS_BODY_PADDING;\n  } else if (contentWidth + POPOVER_IOS_BODY_PADDING + popoverCSS.left + 25 > bodyWidth) {\n    // Ok, so we're on the right side of the screen,\n    // but now we need to make sure we're still a bit further right\n    // cus....notchurally... Again, 25 is random. It works tho\n    checkSafeAreaRight = true;\n    popoverCSS.left = bodyWidth - contentWidth - POPOVER_IOS_BODY_PADDING;\n    originX = 'right';\n  } // make it pop up if there's room above\n\n\n  if (targetTop + targetHeight + contentHeight > bodyHeight && targetTop - contentHeight > 0) {\n    arrowCSS.top = targetTop - (arrowHeight + 1);\n    popoverCSS.top = targetTop - contentHeight - (arrowHeight - 1);\n    baseEl.className = baseEl.className + ' popover-bottom';\n    originY = 'bottom'; // If there isn't room for it to pop up above the target cut it off\n  } else if (targetTop + targetHeight + contentHeight > bodyHeight) {\n    contentEl.style.bottom = POPOVER_IOS_BODY_PADDING + '%';\n  }\n\n  arrowEl.style.top = arrowCSS.top + 'px';\n  arrowEl.style.left = arrowCSS.left + 'px';\n  contentEl.style.top = popoverCSS.top + 'px';\n  contentEl.style.left = popoverCSS.left + 'px';\n\n  if (checkSafeAreaLeft) {\n    contentEl.style.left = \"calc(\" + popoverCSS.left + \"px + var(--ion-safe-area-left, 0px))\";\n  }\n\n  if (checkSafeAreaRight) {\n    contentEl.style.left = \"calc(\" + popoverCSS.left + \"px - var(--ion-safe-area-right, 0px))\";\n  }\n\n  contentEl.style.transformOrigin = originY + ' ' + originX;\n  var baseAnimation = createAnimation();\n  var backdropAnimation = createAnimation();\n  var wrapperAnimation = createAnimation();\n  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 0.08);\n  wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.01, 1);\n  return baseAnimation.addElement(baseEl).easing('ease').duration(100).addAnimation([backdropAnimation, wrapperAnimation]);\n};\n\nvar POPOVER_IOS_BODY_PADDING = 5;\n/**\n * iOS Popover Leave Animation\n */\n\nvar iosLeaveAnimation = function (baseEl) {\n  var baseAnimation = createAnimation();\n  var backdropAnimation = createAnimation();\n  var wrapperAnimation = createAnimation();\n  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.08, 0);\n  wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.99, 0);\n  return baseAnimation.addElement(baseEl).easing('ease').duration(500).addAnimation([backdropAnimation, wrapperAnimation]);\n};\n/**\n * Md Popover Enter Animation\n */\n\n\nvar mdEnterAnimation = function (baseEl, ev) {\n  var POPOVER_MD_BODY_PADDING = 12;\n  var doc = baseEl.ownerDocument;\n  var isRTL = doc.dir === 'rtl';\n  var originY = 'top';\n  var originX = isRTL ? 'right' : 'left';\n  var contentEl = baseEl.querySelector('.popover-content');\n  var contentDimentions = contentEl.getBoundingClientRect();\n  var contentWidth = contentDimentions.width;\n  var contentHeight = contentDimentions.height;\n  var bodyWidth = doc.defaultView.innerWidth;\n  var bodyHeight = doc.defaultView.innerHeight; // If ev was passed, use that for target element\n\n  var targetDim = ev && ev.target && ev.target.getBoundingClientRect(); // As per MD spec, by default position the popover below the target (trigger) element\n\n  var targetTop = targetDim != null && 'bottom' in targetDim ? targetDim.bottom : bodyHeight / 2 - contentHeight / 2;\n  var targetLeft = targetDim != null && 'left' in targetDim ? isRTL ? targetDim.left - contentWidth + targetDim.width : targetDim.left : bodyWidth / 2 - contentWidth / 2;\n  var targetHeight = targetDim && targetDim.height || 0;\n  var popoverCSS = {\n    top: targetTop,\n    left: targetLeft\n  }; // If the popover left is less than the padding it is off screen\n  // to the left so adjust it, else if the width of the popover\n  // exceeds the body width it is off screen to the right so adjust\n\n  if (popoverCSS.left < POPOVER_MD_BODY_PADDING) {\n    popoverCSS.left = POPOVER_MD_BODY_PADDING; // Same origin in this case for both LTR & RTL\n    // Note: in LTR, originX is already 'left'\n\n    originX = 'left';\n  } else if (contentWidth + POPOVER_MD_BODY_PADDING + popoverCSS.left > bodyWidth) {\n    popoverCSS.left = bodyWidth - contentWidth - POPOVER_MD_BODY_PADDING; // Same origin in this case for both LTR & RTL\n    // Note: in RTL, originX is already 'right'\n\n    originX = 'right';\n  } // If the popover when popped down stretches past bottom of screen,\n  // make it pop up if there's room above\n\n\n  if (targetTop + targetHeight + contentHeight > bodyHeight && targetTop - contentHeight > 0) {\n    popoverCSS.top = targetTop - contentHeight - targetHeight;\n    baseEl.className = baseEl.className + ' popover-bottom';\n    originY = 'bottom'; // If there isn't room for it to pop up above the target cut it off\n  } else if (targetTop + targetHeight + contentHeight > bodyHeight) {\n    contentEl.style.bottom = POPOVER_MD_BODY_PADDING + 'px';\n  }\n\n  var baseAnimation = createAnimation();\n  var backdropAnimation = createAnimation();\n  var wrapperAnimation = createAnimation();\n  var contentAnimation = createAnimation();\n  var viewportAnimation = createAnimation();\n  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 0.32);\n  wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.01, 1);\n  contentAnimation.addElement(contentEl).beforeStyles({\n    'top': popoverCSS.top + \"px\",\n    'left': popoverCSS.left + \"px\",\n    'transform-origin': originY + \" \" + originX\n  }).fromTo('transform', 'scale(0.001)', 'scale(1)');\n  viewportAnimation.addElement(baseEl.querySelector('.popover-viewport')).fromTo('opacity', 0.01, 1);\n  return baseAnimation.addElement(baseEl).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(300).addAnimation([backdropAnimation, wrapperAnimation, contentAnimation, viewportAnimation]);\n};\n/**\n * Md Popover Leave Animation\n */\n\n\nvar mdLeaveAnimation = function (baseEl) {\n  var baseAnimation = createAnimation();\n  var backdropAnimation = createAnimation();\n  var wrapperAnimation = createAnimation();\n  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.32, 0);\n  wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.99, 0);\n  return baseAnimation.addElement(baseEl).easing('ease').duration(500).addAnimation([backdropAnimation, wrapperAnimation]);\n};\n\nvar Popover =\n/** @class */\nfunction () {\n  function class_1(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    this.presented = false;\n    this.mode = getIonMode(this);\n    /**\n     * If `true`, the keyboard will be automatically dismissed when the overlay is presented.\n     */\n\n    this.keyboardClose = true;\n    /**\n     * If `true`, the popover will be dismissed when the backdrop is clicked.\n     */\n\n    this.backdropDismiss = true;\n    /**\n     * If `true`, a backdrop will be displayed behind the popover.\n     */\n\n    this.showBackdrop = true;\n    /**\n     * If `true`, the popover will be translucent.\n     * Only applies when the mode is `\"ios\"` and the device supports\n     * [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\n     */\n\n    this.translucent = false;\n    /**\n     * If `true`, the popover will animate.\n     */\n\n    this.animated = true;\n\n    this.onDismiss = function (ev) {\n      ev.stopPropagation();\n      ev.preventDefault();\n\n      _this.dismiss();\n    };\n\n    this.onBackdropTap = function () {\n      _this.dismiss(undefined, BACKDROP);\n    };\n\n    this.onLifecycle = function (modalEvent) {\n      var el = _this.usersElement;\n      var name = LIFECYCLE_MAP[modalEvent.type];\n\n      if (el && name) {\n        var event = new CustomEvent(name, {\n          bubbles: false,\n          cancelable: false,\n          detail: modalEvent.detail\n        });\n        el.dispatchEvent(event);\n      }\n    };\n\n    prepareOverlay(this.el);\n    this.didPresent = createEvent(this, \"ionPopoverDidPresent\", 7);\n    this.willPresent = createEvent(this, \"ionPopoverWillPresent\", 7);\n    this.willDismiss = createEvent(this, \"ionPopoverWillDismiss\", 7);\n    this.didDismiss = createEvent(this, \"ionPopoverDidDismiss\", 7);\n  }\n  /**\n   * Present the popover overlay after it has been created.\n   */\n\n\n  class_1.prototype.present = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var container, data, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.presented) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            container = this.el.querySelector('.popover-content');\n\n            if (!container) {\n              throw new Error('container is undefined');\n            }\n\n            data = Object.assign(Object.assign({}, this.componentProps), {\n              popover: this.el\n            });\n            _a = this;\n            return [4\n            /*yield*/\n            , attachComponent(this.delegate, container, this.component, ['popover-viewport', this.el['s-sc']], data)];\n\n          case 1:\n            _a.usersElement = _b.sent();\n            return [4\n            /*yield*/\n            , deepReady(this.usersElement)];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , present(this, 'popoverEnter', iosEnterAnimation, mdEnterAnimation, this.event)];\n        }\n      });\n    });\n  };\n  /**\n   * Dismiss the popover overlay after it has been presented.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'.\n   */\n\n\n  class_1.prototype.dismiss = function (data, role) {\n    return __awaiter(this, void 0, void 0, function () {\n      var shouldDismiss;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , dismiss(this, data, role, 'popoverLeave', iosLeaveAnimation, mdLeaveAnimation, this.event)];\n\n          case 1:\n            shouldDismiss = _a.sent();\n            if (!shouldDismiss) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , detachComponent(this.delegate, this.usersElement)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , shouldDismiss];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a promise that resolves when the popover did dismiss.\n   */\n\n\n  class_1.prototype.onDidDismiss = function () {\n    return eventMethod(this.el, 'ionPopoverDidDismiss');\n  };\n  /**\n   * Returns a promise that resolves when the popover will dismiss.\n   */\n\n\n  class_1.prototype.onWillDismiss = function () {\n    return eventMethod(this.el, 'ionPopoverWillDismiss');\n  };\n\n  class_1.prototype.render = function () {\n    var _a;\n\n    var mode = getIonMode(this);\n    var onLifecycle = this.onLifecycle;\n    return h(Host, {\n      \"aria-modal\": \"true\",\n      \"no-router\": true,\n      style: {\n        zIndex: \"\" + (20000 + this.overlayIndex)\n      },\n      class: Object.assign(Object.assign({}, getClassMap(this.cssClass)), (_a = {}, _a[mode] = true, _a['popover-translucent'] = this.translucent, _a)),\n      onIonPopoverDidPresent: onLifecycle,\n      onIonPopoverWillPresent: onLifecycle,\n      onIonPopoverWillDismiss: onLifecycle,\n      onIonPopoverDidDismiss: onLifecycle,\n      onIonDismiss: this.onDismiss,\n      onIonBackdropTap: this.onBackdropTap\n    }, h(\"ion-backdrop\", {\n      tappable: this.backdropDismiss,\n      visible: this.showBackdrop\n    }), h(\"div\", {\n      class: \"popover-wrapper\"\n    }, h(\"div\", {\n      class: \"popover-arrow\"\n    }), h(\"div\", {\n      class: \"popover-content\"\n    })));\n  };\n\n  Object.defineProperty(class_1.prototype, \"el\", {\n    get: function () {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"style\", {\n    get: function () {\n      return \".sc-ion-popover-md-h{--background:var(--ion-background-color,#fff);--min-width:0;--min-height:0;--max-width:auto;--height:auto;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:fixed;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;color:var(--ion-text-color,#000);z-index:1001}.overlay-hidden.sc-ion-popover-md-h{display:none}.popover-wrapper.sc-ion-popover-md{opacity:0;z-index:10}.popover-content.sc-ion-popover-md{display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:auto;z-index:10}.popover-viewport.sc-ion-popover-md{--ion-safe-area-top:0px;--ion-safe-area-right:0px;--ion-safe-area-bottom:0px;--ion-safe-area-left:0px}.sc-ion-popover-md-h{--width:250px;--max-height:90%;--box-shadow:0 5px 5px -3px rgba(0,0,0,0.2),0 8px 10px 1px rgba(0,0,0,0.14),0 3px 14px 2px rgba(0,0,0,0.12)}.popover-content.sc-ion-popover-md{border-radius:4px;-webkit-transform-origin:left top;transform-origin:left top}[dir=rtl].sc-ion-popover-md-h .popover-content.sc-ion-popover-md, [dir=rtl] .sc-ion-popover-md-h .popover-content.sc-ion-popover-md, [dir=rtl].sc-ion-popover-md .popover-content.sc-ion-popover-md{-webkit-transform-origin:right top;transform-origin:right top}.popover-viewport.sc-ion-popover-md{-webkit-transition-delay:.1s;transition-delay:.1s}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return class_1;\n}();\n\nvar LIFECYCLE_MAP = {\n  'ionPopoverDidPresent': 'ionViewDidEnter',\n  'ionPopoverWillPresent': 'ionViewWillEnter',\n  'ionPopoverWillDismiss': 'ionViewWillLeave',\n  'ionPopoverDidDismiss': 'ionViewDidLeave'\n};\nexport { Popover as ion_popover };","map":null,"metadata":{},"sourceType":"module"}