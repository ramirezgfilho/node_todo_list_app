{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, d as createEvent, w as writeTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\n\nvar Refresher =\n/** @class */\nfunction () {\n  function class_1(hostRef) {\n    registerInstance(this, hostRef);\n    this.appliedStyles = false;\n    this.didStart = false;\n    this.progress = 0;\n    /**\n     * The current state which the refresher is in. The refresher's states include:\n     *\n     * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n     * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n     * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n     * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n     * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n     * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n     */\n\n    this.state = 1\n    /* Inactive */\n    ;\n    /**\n     * The minimum distance the user must pull down until the\n     * refresher will go into the `refreshing` state.\n     */\n\n    this.pullMin = 60;\n    /**\n     * The maximum distance of the pull until the refresher\n     * will automatically go into the `refreshing` state.\n     * Defaults to the result of `pullMin + 60`.\n     */\n\n    this.pullMax = this.pullMin + 60;\n    /**\n     * Time it takes to close the refresher.\n     */\n\n    this.closeDuration = '280ms';\n    /**\n     * Time it takes the refresher to to snap back to the `refreshing` state.\n     */\n\n    this.snapbackDuration = '280ms';\n    /**\n     * How much to multiply the pull speed by. To slow the pull animation down,\n     * pass a number less than `1`. To speed up the pull, pass a number greater\n     * than `1`. The default value is `1` which is equal to the speed of the cursor.\n     * If a negative value is passed in, the factor will be `1` instead.\n     *\n     * For example: If the value passed is `1.2` and the content is dragged by\n     * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n     * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n     * will be `8` pixels, less than the amount the cursor has moved.\n     */\n\n    this.pullFactor = 1;\n    /**\n     * If `true`, the refresher will be hidden.\n     */\n\n    this.disabled = false;\n    this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n    this.ionPull = createEvent(this, \"ionPull\", 7);\n    this.ionStart = createEvent(this, \"ionStart\", 7);\n  }\n\n  class_1.prototype.disabledChanged = function () {\n    if (this.gesture) {\n      this.gesture.setDisabled(this.disabled);\n    }\n  };\n\n  class_1.prototype.connectedCallback = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var contentEl, _a, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (this.el.getAttribute('slot') !== 'fixed') {\n              console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n              return [2\n              /*return*/\n              ];\n            }\n\n            contentEl = this.el.closest('ion-content');\n\n            if (!contentEl) {\n              console.error('<ion-refresher> must be used inside an <ion-content>');\n              return [2\n              /*return*/\n              ];\n            }\n\n            _a = this;\n            return [4\n            /*yield*/\n            , contentEl.getScrollElement()];\n\n          case 1:\n            _a.scrollEl = _c.sent();\n            _b = this;\n            return [4\n            /*yield*/\n            , import('./index-624eea58.js')];\n\n          case 2:\n            _b.gesture = _c.sent().createGesture({\n              el: contentEl,\n              gestureName: 'refresher',\n              gesturePriority: 10,\n              direction: 'y',\n              threshold: 20,\n              passive: false,\n              canStart: function () {\n                return _this.canStart();\n              },\n              onStart: function () {\n                return _this.onStart();\n              },\n              onMove: function (ev) {\n                return _this.onMove(ev);\n              },\n              onEnd: function () {\n                return _this.onEnd();\n              }\n            });\n            this.disabledChanged();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_1.prototype.disconnectedCallback = function () {\n    this.scrollEl = undefined;\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  };\n  /**\n   * Call `complete()` when your async operation has completed.\n   * For example, the `refreshing` state is while the app is performing\n   * an asynchronous operation, such as receiving more data from an\n   * AJAX request. Once the data has been received, you then call this\n   * method to signify that the refreshing has completed and to close\n   * the refresher. This method also changes the refresher's state from\n   * `refreshing` to `completing`.\n   */\n\n\n  class_1.prototype.complete = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.close(32\n        /* Completing */\n        , '120ms');\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Changes the refresher's state from `refreshing` to `cancelling`.\n   */\n\n\n  class_1.prototype.cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.close(16\n        /* Cancelling */\n        , '');\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * A number representing how far down the user has pulled.\n   * The number `0` represents the user hasn't pulled down at all. The\n   * number `1`, and anything greater than `1`, represents that the user\n   * has pulled far enough down that when they let go then the refresh will\n   * happen. If they let go and the number is less than `1`, then the\n   * refresh will not happen, and the content will return to it's original\n   * position.\n   */\n\n\n  class_1.prototype.getProgress = function () {\n    return Promise.resolve(this.progress);\n  };\n\n  class_1.prototype.canStart = function () {\n    if (!this.scrollEl) {\n      return false;\n    }\n\n    if (this.state !== 1\n    /* Inactive */\n    ) {\n        return false;\n      } // if the scrollTop is greater than zero then it's\n    // not possible to pull the content down yet\n\n\n    if (this.scrollEl.scrollTop > 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  class_1.prototype.onStart = function () {\n    this.progress = 0;\n    this.state = 1\n    /* Inactive */\n    ;\n  };\n\n  class_1.prototype.onMove = function (detail) {\n    if (!this.scrollEl) {\n      return;\n    } // this method can get called like a bazillion times per second,\n    // so it's built to be as efficient as possible, and does its\n    // best to do any DOM read/writes only when absolutely necessary\n    // if multi-touch then get out immediately\n\n\n    var ev = detail.event;\n\n    if (ev.touches && ev.touches.length > 1) {\n      return;\n    } // do nothing if it's actively refreshing\n    // or it's in the way of closing\n    // or this was never a startY\n\n\n    if ((this.state & 56\n    /* _BUSY_ */\n    ) !== 0) {\n      return;\n    }\n\n    var pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n    var deltaY = detail.deltaY * pullFactor; // don't bother if they're scrolling up\n    // and have not already started dragging\n\n    if (deltaY <= 0) {\n      // the current Y is higher than the starting Y\n      // so they scrolled up enough to be ignored\n      this.progress = 0;\n      this.state = 1\n      /* Inactive */\n      ;\n\n      if (this.appliedStyles) {\n        // reset the styles only if they were applied\n        this.setCss(0, '', false, '');\n        return;\n      }\n\n      return;\n    }\n\n    if (this.state === 1\n    /* Inactive */\n    ) {\n        // this refresh is not already actively pulling down\n        // get the content's scrollTop\n        var scrollHostScrollTop = this.scrollEl.scrollTop; // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n\n        if (scrollHostScrollTop > 0) {\n          this.progress = 0;\n          return;\n        } // content scrolled all the way to the top, and dragging down\n\n\n        this.state = 2\n        /* Pulling */\n        ;\n      } // prevent native scroll events\n\n\n    if (ev.cancelable) {\n      ev.preventDefault();\n    } // the refresher is actively pulling at this point\n    // move the scroll element within the content element\n\n\n    this.setCss(deltaY, '0ms', true, '');\n\n    if (deltaY === 0) {\n      // don't continue if there's no delta yet\n      this.progress = 0;\n      return;\n    }\n\n    var pullMin = this.pullMin; // set pull progress\n\n    this.progress = deltaY / pullMin; // emit \"start\" if it hasn't started yet\n\n    if (!this.didStart) {\n      this.didStart = true;\n      this.ionStart.emit();\n    } // emit \"pulling\" on every move\n\n\n    this.ionPull.emit(); // do nothing if the delta is less than the pull threshold\n\n    if (deltaY < pullMin) {\n      // ensure it stays in the pulling state, cuz its not ready yet\n      this.state = 2\n      /* Pulling */\n      ;\n      return;\n    }\n\n    if (deltaY > this.pullMax) {\n      // they pulled farther than the max, so kick off the refresh\n      this.beginRefresh();\n      return;\n    } // pulled farther than the pull min!!\n    // it is now in the `ready` state!!\n    // if they let go then it'll refresh, kerpow!!\n\n\n    this.state = 4\n    /* Ready */\n    ;\n    return;\n  };\n\n  class_1.prototype.onEnd = function () {\n    // only run in a zone when absolutely necessary\n    if (this.state === 4\n    /* Ready */\n    ) {\n        // they pulled down far enough, so it's ready to refresh\n        this.beginRefresh();\n      } else if (this.state === 2\n    /* Pulling */\n    ) {\n        // they were pulling down, but didn't pull down far enough\n        // set the content back to it's original location\n        // and close the refresher\n        // set that the refresh is actively cancelling\n        this.cancel();\n      }\n  };\n\n  class_1.prototype.beginRefresh = function () {\n    // assumes we're already back in a zone\n    // they pulled down far enough, so it's ready to refresh\n    this.state = 8\n    /* Refreshing */\n    ; // place the content in a hangout position while it thinks\n\n    this.setCss(this.pullMin, this.snapbackDuration, true, ''); // emit \"refresh\" because it was pulled down far enough\n    // and they let go to begin refreshing\n\n    this.ionRefresh.emit({\n      complete: this.complete.bind(this)\n    });\n  };\n\n  class_1.prototype.close = function (state, delay) {\n    var _this = this; // create fallback timer incase something goes wrong with transitionEnd event\n\n\n    setTimeout(function () {\n      _this.state = 1\n      /* Inactive */\n      ;\n      _this.progress = 0;\n      _this.didStart = false;\n\n      _this.setCss(0, '0ms', false, '');\n    }, 600); // reset set the styles on the scroll element\n    // set that the refresh is actively cancelling/completing\n\n    this.state = state;\n    this.setCss(0, this.closeDuration, true, delay); // TODO: stop gesture\n  };\n\n  class_1.prototype.setCss = function (y, duration, overflowVisible, delay) {\n    var _this = this;\n\n    this.appliedStyles = y > 0;\n    writeTask(function () {\n      if (_this.scrollEl) {\n        var style = _this.scrollEl.style;\n        style.transform = y > 0 ? \"translateY(\" + y + \"px) translateZ(0px)\" : 'translateZ(0px)';\n        style.transitionDuration = duration;\n        style.transitionDelay = delay;\n        style.overflow = overflowVisible ? 'hidden' : '';\n      }\n    });\n  };\n\n  class_1.prototype.render = function () {\n    var _a;\n\n    var mode = getIonMode(this);\n    return h(Host, {\n      slot: \"fixed\",\n      class: (_a = {}, _a[mode] = true, // Used internally for styling\n      _a[\"refresher-\" + mode] = true, _a['refresher-active'] = this.state !== 1\n      /* Inactive */\n      , _a['refresher-pulling'] = this.state === 2\n      /* Pulling */\n      , _a['refresher-ready'] = this.state === 4\n      /* Ready */\n      , _a['refresher-refreshing'] = this.state === 8\n      /* Refreshing */\n      , _a['refresher-cancelling'] = this.state === 16\n      /* Cancelling */\n      , _a['refresher-completing'] = this.state === 32\n      /* Completing */\n      , _a)\n    });\n  };\n\n  Object.defineProperty(class_1.prototype, \"el\", {\n    get: function () {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"watchers\", {\n    get: function () {\n      return {\n        \"disabled\": [\"disabledChanged\"]\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"style\", {\n    get: function () {\n      return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return class_1;\n}();\n\nvar RefresherContent =\n/** @class */\nfunction () {\n  function RefresherContent(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  RefresherContent.prototype.componentWillLoad = function () {\n    if (this.pullingIcon === undefined) {\n      this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n    }\n\n    if (this.refreshingSpinner === undefined) {\n      var mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  };\n\n  RefresherContent.prototype.render = function () {\n    return h(Host, {\n      class: getIonMode(this)\n    }, h(\"div\", {\n      class: \"refresher-pulling\"\n    }, this.pullingIcon && h(\"div\", {\n      class: \"refresher-pulling-icon\"\n    }, h(\"ion-icon\", {\n      icon: this.pullingIcon,\n      lazy: false\n    })), this.pullingText && h(\"div\", {\n      class: \"refresher-pulling-text\",\n      innerHTML: sanitizeDOMString(this.pullingText)\n    })), h(\"div\", {\n      class: \"refresher-refreshing\"\n    }, this.refreshingSpinner && h(\"div\", {\n      class: \"refresher-refreshing-icon\"\n    }, h(\"ion-spinner\", {\n      name: this.refreshingSpinner\n    })), this.refreshingText && h(\"div\", {\n      class: \"refresher-refreshing-text\",\n      innerHTML: sanitizeDOMString(this.refreshingText)\n    })));\n  };\n\n  return RefresherContent;\n}();\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };","map":null,"metadata":{},"sourceType":"module"}