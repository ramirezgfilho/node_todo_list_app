{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { r as raf } from './helpers-46f4a262.js';\n\nvar setStyleProperty = function (element, propertyName, value) {\n  element.style.setProperty(propertyName, value);\n};\n\nvar removeStyleProperty = function (element, propertyName) {\n  element.style.removeProperty(propertyName);\n};\n\nvar animationEnd = function (el, callback) {\n  var unRegTrans;\n  var opts = {\n    passive: true\n  };\n\n  var unregister = function () {\n    if (unRegTrans) {\n      unRegTrans();\n    }\n  };\n\n  var onTransitionEnd = function (ev) {\n    if (el === ev.target) {\n      unregister();\n      callback(ev);\n    }\n  };\n\n  if (el) {\n    el.addEventListener('webkitAnimationEnd', onTransitionEnd, opts);\n    el.addEventListener('animationend', onTransitionEnd, opts);\n\n    unRegTrans = function () {\n      el.removeEventListener('webkitAnimationEnd', onTransitionEnd, opts);\n      el.removeEventListener('animationend', onTransitionEnd, opts);\n    };\n  }\n\n  return unregister;\n};\n\nvar generateKeyframeRules = function (keyframes) {\n  if (keyframes === void 0) {\n    keyframes = [];\n  }\n\n  return keyframes.map(function (keyframe) {\n    var offset = keyframe.offset;\n    var frameString = [];\n\n    for (var property in keyframe) {\n      if (keyframe.hasOwnProperty(property) && property !== 'offset') {\n        frameString.push(property + \": \" + keyframe[property] + \";\");\n      }\n    }\n\n    return offset * 100 + \"% { \" + frameString.join(' ') + \" }\";\n  }).join(' ');\n};\n\nvar keyframeIds = [];\n\nvar generateKeyframeName = function (keyframeRules) {\n  var index = keyframeIds.indexOf(keyframeRules);\n\n  if (index < 0) {\n    index = keyframeIds.push(keyframeRules) - 1;\n  }\n\n  return \"ion-animation-\" + index;\n};\n\nvar getStyleContainer = function (element) {\n  var rootNode = element.getRootNode();\n  return rootNode.head || rootNode;\n};\n\nvar createKeyframeStylesheet = function (keyframeName, keyframeRules, element) {\n  var styleContainer = getStyleContainer(element);\n  var existingStylesheet = styleContainer.querySelector('#' + keyframeName);\n\n  if (existingStylesheet) {\n    return existingStylesheet;\n  }\n\n  var stylesheet = (element.ownerDocument || document).createElement('style');\n  stylesheet.id = keyframeName;\n  stylesheet.textContent = \"@keyframes \" + keyframeName + \" { \" + keyframeRules + \" } @keyframes \" + keyframeName + \"-alt { \" + keyframeRules + \" }\";\n  styleContainer.appendChild(stylesheet);\n  return stylesheet;\n};\n\nvar addClassToArray = function (classes, className) {\n  if (classes === void 0) {\n    classes = [];\n  }\n\n  if (className !== undefined) {\n    var classNameToAppend = Array.isArray(className) ? className : [className];\n    return __spreadArrays(classes, classNameToAppend);\n  }\n\n  return classes;\n}; // TODO: Add more tests. until then, be sure to manually test menu and swipe to go back/routing transitions\n\n\nvar createAnimation = function () {\n  var _delay;\n\n  var _duration;\n\n  var _easing;\n\n  var _iterations;\n\n  var _fill;\n\n  var _direction;\n\n  var _keyframes = [];\n  var beforeAddClasses = [];\n  var beforeRemoveClasses = [];\n  var initialized = false;\n  var parentAnimation;\n  var beforeStylesValue = {};\n  var afterAddClasses = [];\n  var afterRemoveClasses = [];\n  var afterStylesValue = {};\n  var numAnimationsRunning = 0;\n  var shouldForceLinearEasing = false;\n  var shouldForceSyncPlayback = false;\n  var cssAnimationsTimerFallback;\n  var forceDirectionValue;\n  var forceDurationValue;\n  var forceDelayValue;\n  var willComplete = true;\n  var finished = false;\n  var shouldCalculateNumAnimations = true;\n  var keyframeName;\n  var ani;\n  var onFinishCallbacks = [];\n  var onFinishOneTimeCallbacks = [];\n  var elements = [];\n  var childAnimations = [];\n  var stylesheets = [];\n  var _beforeAddReadFunctions = [];\n  var _beforeAddWriteFunctions = [];\n  var _afterAddReadFunctions = [];\n  var _afterAddWriteFunctions = [];\n  var webAnimations = [];\n  var supportsAnimationEffect = typeof AnimationEffect === 'function' || typeof window.AnimationEffect === 'function';\n  var supportsWebAnimations = typeof Element === 'function' && typeof Element.prototype.animate === 'function' && supportsAnimationEffect;\n  var ANIMATION_END_FALLBACK_PADDING_MS = 100;\n\n  var getWebAnimations = function () {\n    return webAnimations;\n  };\n\n  var destroy = function () {\n    childAnimations.forEach(function (childAnimation) {\n      childAnimation.destroy();\n    });\n    cleanUp();\n    elements.length = 0;\n    childAnimations.length = 0;\n    _keyframes.length = 0;\n    clearOnFinish();\n    initialized = false;\n    shouldCalculateNumAnimations = true;\n    return ani;\n  };\n  /**\n   * Cancels any Web Animations, removes\n   * any animation properties from the\n   * animation's elements, and removes the\n   * animation's stylesheets from the DOM.\n   */\n\n\n  var cleanUp = function () {\n    cleanUpElements();\n    cleanUpStyleSheets();\n  };\n\n  var onFinish = function (callback, opts) {\n    var callbacks = opts && opts.oneTimeCallback ? onFinishOneTimeCallbacks : onFinishCallbacks;\n    callbacks.push({\n      c: callback,\n      o: opts\n    });\n    return ani;\n  };\n\n  var clearOnFinish = function () {\n    onFinishCallbacks.length = 0;\n    onFinishOneTimeCallbacks.length = 0;\n    return ani;\n  };\n  /**\n   * Cancels any Web Animations and removes\n   * any animation properties from the\n   * the animation's elements.\n   */\n\n\n  var cleanUpElements = function () {\n    if (supportsWebAnimations) {\n      webAnimations.forEach(function (animation) {\n        animation.cancel();\n      });\n      webAnimations.length = 0;\n    } else {\n      var elementsArray_1 = elements.slice();\n      raf(function () {\n        elementsArray_1.forEach(function (element) {\n          removeStyleProperty(element, 'animation-name');\n          removeStyleProperty(element, 'animation-duration');\n          removeStyleProperty(element, 'animation-timing-function');\n          removeStyleProperty(element, 'animation-iteration-count');\n          removeStyleProperty(element, 'animation-delay');\n          removeStyleProperty(element, 'animation-play-state');\n          removeStyleProperty(element, 'animation-fill-mode');\n          removeStyleProperty(element, 'animation-direction');\n        });\n      });\n    }\n  };\n  /**\n   * Removes the animation's stylesheets\n   * from the DOM.\n   */\n\n\n  var cleanUpStyleSheets = function () {\n    stylesheets.forEach(function (stylesheet) {\n      /**\n       * When sharing stylesheets, it's possible\n       * for another animation to have already\n       * cleaned up a particular stylesheet\n       */\n      if (stylesheet && stylesheet.parentNode) {\n        stylesheet.parentNode.removeChild(stylesheet);\n      }\n    });\n    stylesheets.length = 0;\n  };\n\n  var beforeAddRead = function (readFn) {\n    _beforeAddReadFunctions.push(readFn);\n\n    return ani;\n  };\n\n  var beforeAddWrite = function (writeFn) {\n    _beforeAddWriteFunctions.push(writeFn);\n\n    return ani;\n  };\n\n  var afterAddRead = function (readFn) {\n    _afterAddReadFunctions.push(readFn);\n\n    return ani;\n  };\n\n  var afterAddWrite = function (writeFn) {\n    _afterAddWriteFunctions.push(writeFn);\n\n    return ani;\n  };\n\n  var beforeAddClass = function (className) {\n    beforeAddClasses = addClassToArray(beforeAddClasses, className);\n    return ani;\n  };\n\n  var beforeRemoveClass = function (className) {\n    beforeRemoveClasses = addClassToArray(beforeRemoveClasses, className);\n    return ani;\n  };\n  /**\n   * Set CSS inline styles to the animation's\n   * elements before the animation begins.\n   */\n\n\n  var beforeStyles = function (styles) {\n    if (styles === void 0) {\n      styles = {};\n    }\n\n    beforeStylesValue = styles;\n    return ani;\n  };\n  /**\n   * Clear CSS inline styles from the animation's\n   * elements before the animation begins.\n   */\n\n\n  var beforeClearStyles = function (propertyNames) {\n    if (propertyNames === void 0) {\n      propertyNames = [];\n    }\n\n    for (var _i = 0, propertyNames_1 = propertyNames; _i < propertyNames_1.length; _i++) {\n      var property = propertyNames_1[_i];\n      beforeStylesValue[property] = '';\n    }\n\n    return ani;\n  };\n\n  var afterAddClass = function (className) {\n    afterAddClasses = addClassToArray(afterAddClasses, className);\n    return ani;\n  };\n\n  var afterRemoveClass = function (className) {\n    afterRemoveClasses = addClassToArray(afterRemoveClasses, className);\n    return ani;\n  };\n\n  var afterStyles = function (styles) {\n    if (styles === void 0) {\n      styles = {};\n    }\n\n    afterStylesValue = styles;\n    return ani;\n  };\n\n  var afterClearStyles = function (propertyNames) {\n    if (propertyNames === void 0) {\n      propertyNames = [];\n    }\n\n    for (var _i = 0, propertyNames_2 = propertyNames; _i < propertyNames_2.length; _i++) {\n      var property = propertyNames_2[_i];\n      afterStylesValue[property] = '';\n    }\n\n    return ani;\n  };\n\n  var getFill = function () {\n    if (_fill !== undefined) {\n      return _fill;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getFill();\n    }\n\n    return 'both';\n  };\n\n  var getDirection = function () {\n    if (forceDirectionValue !== undefined) {\n      return forceDirectionValue;\n    }\n\n    if (_direction !== undefined) {\n      return _direction;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getDirection();\n    }\n\n    return 'normal';\n  };\n\n  var getEasing = function () {\n    if (shouldForceLinearEasing) {\n      return 'linear';\n    }\n\n    if (_easing !== undefined) {\n      return _easing;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getEasing();\n    }\n\n    return 'linear';\n  };\n\n  var getDuration = function () {\n    if (shouldForceSyncPlayback) {\n      return 0;\n    }\n\n    if (forceDurationValue !== undefined) {\n      return forceDurationValue;\n    }\n\n    if (_duration !== undefined) {\n      return _duration;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getDuration();\n    }\n\n    return 0;\n  };\n\n  var getIterations = function () {\n    if (_iterations !== undefined) {\n      return _iterations;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getIterations();\n    }\n\n    return 1;\n  };\n\n  var getDelay = function () {\n    if (forceDelayValue !== undefined) {\n      return forceDelayValue;\n    }\n\n    if (_delay !== undefined) {\n      return _delay;\n    }\n\n    if (parentAnimation) {\n      return parentAnimation.getDelay();\n    }\n\n    return 0;\n  };\n\n  var getKeyframes = function () {\n    return _keyframes;\n  };\n\n  var direction = function (animationDirection) {\n    _direction = animationDirection;\n    update(true);\n    return ani;\n  };\n\n  var fill = function (animationFill) {\n    _fill = animationFill;\n    update(true);\n    return ani;\n  };\n\n  var delay = function (animationDelay) {\n    _delay = animationDelay;\n    update(true);\n    return ani;\n  };\n\n  var easing = function (animationEasing) {\n    _easing = animationEasing;\n    update(true);\n    return ani;\n  };\n\n  var duration = function (animationDuration) {\n    /**\n     * CSS Animation Durations of 0ms work fine on Chrome\n     * but do not run on Safari, so force it to 1ms to\n     * get it to run on both platforms.\n     */\n    if (!supportsWebAnimations && animationDuration === 0) {\n      animationDuration = 1;\n    }\n\n    _duration = animationDuration;\n    update(true);\n    return ani;\n  };\n\n  var iterations = function (animationIterations) {\n    _iterations = animationIterations;\n    update(true);\n    return ani;\n  };\n\n  var parent = function (animation) {\n    parentAnimation = animation;\n    return ani;\n  };\n\n  var addElement = function (el) {\n    if (el != null) {\n      if (el.nodeType === 1) {\n        elements.push(el);\n      } else if (el.length >= 0) {\n        for (var i = 0; i < el.length; i++) {\n          elements.push(el[i]);\n        }\n      } else {\n        console.error('Invalid addElement value');\n      }\n    }\n\n    return ani;\n  };\n\n  var addAnimation = function (animationToAdd) {\n    if (animationToAdd != null) {\n      if (Array.isArray(animationToAdd)) {\n        for (var _i = 0, animationToAdd_1 = animationToAdd; _i < animationToAdd_1.length; _i++) {\n          var animation = animationToAdd_1[_i];\n          animation.parent(ani);\n          childAnimations.push(animation);\n        }\n      } else {\n        animationToAdd.parent(ani);\n        childAnimations.push(animationToAdd);\n      }\n    }\n\n    return ani;\n  };\n\n  var keyframes = function (keyframeValues) {\n    _keyframes = keyframeValues;\n    return ani;\n  };\n  /**\n   * Runs all before read callbacks\n   */\n\n\n  var runBeforeRead = function () {\n    _beforeAddReadFunctions.forEach(function (callback) {\n      callback();\n    });\n  };\n  /**\n   * Runs all before write callbacks\n   */\n\n\n  var runBeforeWrite = function () {\n    _beforeAddWriteFunctions.forEach(function (callback) {\n      callback();\n    });\n  };\n  /**\n   * Updates styles and classes before animation runs\n   */\n\n\n  var runBeforeStyles = function () {\n    var addClasses = beforeAddClasses;\n    var removeClasses = beforeRemoveClasses;\n    var styles = beforeStylesValue;\n    elements.forEach(function (el) {\n      var elementClassList = el.classList;\n      addClasses.forEach(function (c) {\n        return elementClassList.add(c);\n      });\n      removeClasses.forEach(function (c) {\n        return elementClassList.remove(c);\n      });\n\n      for (var property in styles) {\n        if (styles.hasOwnProperty(property)) {\n          setStyleProperty(el, property, styles[property]);\n        }\n      }\n    });\n  };\n  /**\n   * Run all \"before\" animation hooks.\n   */\n\n\n  var beforeAnimation = function () {\n    runBeforeRead();\n    runBeforeWrite();\n    runBeforeStyles();\n  };\n  /**\n   * Runs all after read callbacks\n   */\n\n\n  var runAfterRead = function () {\n    _afterAddReadFunctions.forEach(function (callback) {\n      callback();\n    });\n  };\n  /**\n   * Runs all after write callbacks\n   */\n\n\n  var runAfterWrite = function () {\n    _afterAddWriteFunctions.forEach(function (callback) {\n      callback();\n    });\n  };\n  /**\n   * Updates styles and classes before animation ends\n   */\n\n\n  var runAfterStyles = function () {\n    var addClasses = afterAddClasses;\n    var removeClasses = afterRemoveClasses;\n    var styles = afterStylesValue;\n    elements.forEach(function (el) {\n      var elementClassList = el.classList;\n      addClasses.forEach(function (c) {\n        return elementClassList.add(c);\n      });\n      removeClasses.forEach(function (c) {\n        return elementClassList.remove(c);\n      });\n\n      for (var property in styles) {\n        if (styles.hasOwnProperty(property)) {\n          setStyleProperty(el, property, styles[property]);\n        }\n      }\n    });\n  };\n  /**\n   * Run all \"after\" animation hooks.\n   */\n\n\n  var afterAnimation = function () {\n    clearCSSAnimationsTimeout();\n    runAfterRead();\n    runAfterWrite();\n    runAfterStyles();\n    var currentStep = willComplete ? 1 : 0;\n    onFinishCallbacks.forEach(function (onFinishCallback) {\n      return onFinishCallback.c(currentStep, ani);\n    });\n    onFinishOneTimeCallbacks.forEach(function (onFinishCallback) {\n      return onFinishCallback.c(currentStep, ani);\n    });\n    onFinishOneTimeCallbacks.length = 0;\n    shouldCalculateNumAnimations = true;\n    finished = true;\n  };\n\n  var animationFinish = function () {\n    if (numAnimationsRunning === 0) {\n      return;\n    }\n\n    numAnimationsRunning--;\n\n    if (numAnimationsRunning === 0) {\n      afterAnimation();\n\n      if (parentAnimation) {\n        parentAnimation.animationFinish();\n      }\n    }\n  };\n\n  var initializeCSSAnimation = function (toggleAnimationName) {\n    if (toggleAnimationName === void 0) {\n      toggleAnimationName = true;\n    }\n\n    cleanUpStyleSheets();\n    elements.forEach(function (element) {\n      if (_keyframes.length > 0) {\n        var keyframeRules = generateKeyframeRules(_keyframes);\n        keyframeName = generateKeyframeName(keyframeRules);\n        var stylesheet_1 = createKeyframeStylesheet(keyframeName, keyframeRules, element);\n        stylesheets.push(stylesheet_1);\n        setStyleProperty(element, 'animation-duration', getDuration() + \"ms\");\n        setStyleProperty(element, 'animation-timing-function', getEasing());\n        setStyleProperty(element, 'animation-delay', getDelay() + \"ms\");\n        setStyleProperty(element, 'animation-fill-mode', getFill());\n        setStyleProperty(element, 'animation-direction', getDirection());\n        var iterationsCount = getIterations() === Infinity ? 'infinite' : getIterations().toString();\n        setStyleProperty(element, 'animation-iteration-count', iterationsCount);\n        setStyleProperty(element, 'animation-play-state', 'paused');\n\n        if (toggleAnimationName) {\n          setStyleProperty(element, 'animation-name', stylesheet_1.id + \"-alt\");\n        }\n\n        raf(function () {\n          setStyleProperty(element, 'animation-name', stylesheet_1.id || null);\n        });\n      }\n    });\n  };\n\n  var initializeWebAnimation = function () {\n    elements.forEach(function (element) {\n      var animation = element.animate(_keyframes, {\n        delay: getDelay(),\n        duration: getDuration(),\n        easing: getEasing(),\n        iterations: getIterations(),\n        fill: getFill(),\n        direction: getDirection()\n      });\n      animation.pause();\n      webAnimations.push(animation);\n    });\n\n    if (webAnimations.length > 0) {\n      webAnimations[0].onfinish = function () {\n        animationFinish();\n      };\n    }\n  };\n\n  var initializeAnimation = function (toggleAnimationName) {\n    if (toggleAnimationName === void 0) {\n      toggleAnimationName = true;\n    }\n\n    beforeAnimation();\n\n    if (_keyframes.length > 0) {\n      if (supportsWebAnimations) {\n        initializeWebAnimation();\n      } else {\n        initializeCSSAnimation(toggleAnimationName);\n      }\n    }\n\n    initialized = true;\n  };\n\n  var setAnimationStep = function (step) {\n    step = Math.min(Math.max(step, 0), 0.999);\n\n    if (supportsWebAnimations) {\n      webAnimations.forEach(function (animation) {\n        animation.currentTime = animation.effect.getComputedTiming().delay + getDuration() * step;\n        animation.pause();\n      });\n    } else {\n      var animationDelay = getDelay() || 0;\n      var animationDuration_1 = \"-\" + (animationDelay + getDuration() * step) + \"ms\";\n      elements.forEach(function (element) {\n        if (_keyframes.length > 0) {\n          setStyleProperty(element, 'animation-delay', animationDuration_1);\n          setStyleProperty(element, 'animation-play-state', 'paused');\n        }\n      });\n    }\n  };\n\n  var updateWebAnimation = function () {\n    webAnimations.forEach(function (animation) {\n      animation.effect.updateTiming({\n        delay: getDelay(),\n        duration: getDuration(),\n        easing: getEasing(),\n        iterations: getIterations(),\n        fill: getFill(),\n        direction: getDirection()\n      });\n    });\n  };\n\n  var updateCSSAnimation = function (toggleAnimationName) {\n    if (toggleAnimationName === void 0) {\n      toggleAnimationName = true;\n    }\n\n    elements.forEach(function (element) {\n      raf(function () {\n        setStyleProperty(element, 'animation-name', keyframeName || null);\n        setStyleProperty(element, 'animation-duration', getDuration() + \"ms\");\n        setStyleProperty(element, 'animation-timing-function', getEasing());\n        setStyleProperty(element, 'animation-delay', getDelay() + \"ms\");\n        setStyleProperty(element, 'animation-fill-mode', getFill() || null);\n        setStyleProperty(element, 'animation-direction', getDirection() || null);\n        var iterationsCount = getIterations() === Infinity ? 'infinite' : getIterations().toString();\n        setStyleProperty(element, 'animation-iteration-count', iterationsCount);\n\n        if (toggleAnimationName) {\n          setStyleProperty(element, 'animation-name', keyframeName + \"-alt\");\n        }\n\n        raf(function () {\n          setStyleProperty(element, 'animation-name', keyframeName || null);\n        });\n      });\n    });\n  };\n\n  var update = function (deep, toggleAnimationName) {\n    if (deep === void 0) {\n      deep = false;\n    }\n\n    if (toggleAnimationName === void 0) {\n      toggleAnimationName = true;\n    }\n\n    if (deep) {\n      childAnimations.forEach(function (animation) {\n        animation.update(deep);\n      });\n    }\n\n    if (supportsWebAnimations) {\n      updateWebAnimation();\n    } else {\n      updateCSSAnimation(toggleAnimationName);\n    }\n\n    return ani;\n  };\n\n  var progressStart = function (forceLinearEasing) {\n    if (forceLinearEasing === void 0) {\n      forceLinearEasing = false;\n    }\n\n    childAnimations.forEach(function (animation) {\n      animation.progressStart(forceLinearEasing);\n    });\n    pauseAnimation();\n    shouldForceLinearEasing = forceLinearEasing;\n\n    if (!initialized) {\n      initializeAnimation();\n    } else {\n      update();\n      setAnimationStep(0);\n    }\n\n    return ani;\n  };\n\n  var progressStep = function (step) {\n    childAnimations.forEach(function (animation) {\n      animation.progressStep(step);\n    });\n    setAnimationStep(step);\n    return ani;\n  };\n\n  var progressEnd = function (playTo, step, dur) {\n    shouldForceLinearEasing = false;\n    childAnimations.forEach(function (animation) {\n      animation.progressEnd(playTo, step, dur);\n    });\n\n    if (dur !== undefined) {\n      forceDurationValue = dur;\n    }\n\n    finished = false;\n    willComplete = playTo === 1;\n\n    if (!willComplete) {\n      forceDirectionValue = getDirection() === 'reverse' ? 'normal' : 'reverse';\n\n      if (supportsWebAnimations) {\n        update();\n        setAnimationStep(1 - step);\n      } else {\n        forceDelayValue = (1 - step) * getDuration() * -1;\n        update(false, false);\n      }\n    } else {\n      if (!supportsWebAnimations) {\n        forceDelayValue = step * getDuration() * -1;\n        update(false, false);\n      }\n    }\n\n    onFinish(function () {\n      willComplete = true;\n      forceDurationValue = undefined;\n      forceDirectionValue = undefined;\n      forceDelayValue = undefined;\n    }, {\n      oneTimeCallback: true\n    });\n\n    if (!parentAnimation) {\n      play();\n    }\n\n    return ani;\n  };\n\n  var pauseAnimation = function () {\n    if (initialized) {\n      if (supportsWebAnimations) {\n        webAnimations.forEach(function (animation) {\n          animation.pause();\n        });\n      } else {\n        elements.forEach(function (element) {\n          setStyleProperty(element, 'animation-play-state', 'paused');\n        });\n      }\n    }\n  };\n\n  var pause = function () {\n    childAnimations.forEach(function (animation) {\n      animation.pause();\n    });\n    pauseAnimation();\n    return ani;\n  };\n\n  var playAsync = function () {\n    return play();\n  };\n\n  var playSync = function () {\n    play({\n      sync: true\n    });\n    return ani;\n  };\n\n  var onAnimationEndFallback = function () {\n    cssAnimationsTimerFallback = undefined;\n    animationFinish();\n  };\n\n  var clearCSSAnimationsTimeout = function () {\n    if (cssAnimationsTimerFallback) {\n      clearTimeout(cssAnimationsTimerFallback);\n    }\n  };\n\n  var playCSSAnimations = function () {\n    clearCSSAnimationsTimeout();\n    elements.forEach(function (element) {\n      if (_keyframes.length > 0) {\n        raf(function () {\n          setStyleProperty(element, 'animation-play-state', 'running');\n        });\n      }\n    });\n\n    if (_keyframes.length === 0 || elements.length === 0) {\n      animationFinish();\n    } else {\n      /**\n       * This is a catchall in the event that a CSS Animation did not finish.\n       * The Web Animations API has mechanisms in place for preventing this.\n       * CSS Animations will not fire an `animationend` event\n       * for elements with `display: none`. The Web Animations API\n       * accounts for this, but using raw CSS Animations requires\n       * this workaround.\n       */\n      var animationDelay = getDelay() || 0;\n      var animationDuration = getDuration() || 0;\n      var animationIterations = getIterations() || 1;\n      cssAnimationsTimerFallback = setTimeout(onAnimationEndFallback, animationDelay + animationDuration * animationIterations + ANIMATION_END_FALLBACK_PADDING_MS);\n      animationEnd(elements[0], function () {\n        clearCSSAnimationsTimeout();\n        /**\n         * Ensure that clean up\n         * is always done a frame\n         * before the onFinish handlers\n         * are fired. Otherwise, there\n         * may be flickering if a new\n         * animation is started on the same\n         * element too quickly\n         *\n         * TODO: Is there a cleaner way to do this?\n         */\n\n        raf(function () {\n          clearCSSAnimationPlayState();\n          raf(animationFinish);\n        });\n      });\n    }\n  };\n\n  var clearCSSAnimationPlayState = function () {\n    elements.forEach(function (element) {\n      removeStyleProperty(element, 'animation-duration');\n      removeStyleProperty(element, 'animation-delay');\n      removeStyleProperty(element, 'animation-play-state');\n    });\n  };\n\n  var playWebAnimations = function () {\n    webAnimations.forEach(function (animation) {\n      animation.play();\n    });\n\n    if (_keyframes.length === 0 || elements.length === 0) {\n      animationFinish();\n    }\n  };\n\n  var resetAnimation = function () {\n    if (supportsWebAnimations) {\n      setAnimationStep(0);\n    } else {\n      updateCSSAnimation();\n    }\n  };\n\n  var play = function (opts) {\n    return new Promise(function (resolve) {\n      if (opts && opts.sync) {\n        shouldForceSyncPlayback = true;\n        onFinish(function () {\n          return shouldForceSyncPlayback = false;\n        }, {\n          oneTimeCallback: true\n        });\n      }\n\n      if (!initialized) {\n        initializeAnimation();\n      }\n\n      if (finished) {\n        resetAnimation();\n        finished = false;\n      }\n\n      if (shouldCalculateNumAnimations) {\n        numAnimationsRunning = childAnimations.length + 1;\n        shouldCalculateNumAnimations = false;\n      }\n\n      onFinish(function () {\n        return resolve();\n      }, {\n        oneTimeCallback: true\n      });\n      childAnimations.forEach(function (animation) {\n        animation.play();\n      });\n\n      if (supportsWebAnimations) {\n        playWebAnimations();\n      } else {\n        playCSSAnimations();\n      }\n    });\n  };\n\n  var stop = function () {\n    childAnimations.forEach(function (animation) {\n      animation.stop();\n    });\n\n    if (initialized) {\n      cleanUpElements();\n      initialized = false;\n    }\n  };\n\n  var from = function (property, value) {\n    var _a;\n\n    var firstFrame = _keyframes[0];\n\n    if (firstFrame !== undefined && firstFrame.offset === 0) {\n      firstFrame[property] = value;\n    } else {\n      _keyframes = __spreadArrays([(_a = {\n        offset: 0\n      }, _a[property] = value, _a)], _keyframes);\n    }\n\n    return ani;\n  };\n\n  var to = function (property, value) {\n    var _a;\n\n    var lastFrame = _keyframes[_keyframes.length - 1];\n\n    if (lastFrame !== undefined && lastFrame.offset === 1) {\n      lastFrame[property] = value;\n    } else {\n      _keyframes = __spreadArrays(_keyframes, [(_a = {\n        offset: 1\n      }, _a[property] = value, _a)]);\n    }\n\n    return ani;\n  };\n\n  var fromTo = function (property, fromValue, toValue) {\n    return from(property, fromValue).to(property, toValue);\n  };\n\n  return ani = {\n    parentAnimation: parentAnimation,\n    elements: elements,\n    childAnimations: childAnimations,\n    animationFinish: animationFinish,\n    from: from,\n    to: to,\n    fromTo: fromTo,\n    parent: parent,\n    play: play,\n    playAsync: playAsync,\n    playSync: playSync,\n    pause: pause,\n    stop: stop,\n    destroy: destroy,\n    keyframes: keyframes,\n    addAnimation: addAnimation,\n    addElement: addElement,\n    update: update,\n    fill: fill,\n    direction: direction,\n    iterations: iterations,\n    duration: duration,\n    easing: easing,\n    delay: delay,\n    getWebAnimations: getWebAnimations,\n    getKeyframes: getKeyframes,\n    getFill: getFill,\n    getDirection: getDirection,\n    getDelay: getDelay,\n    getIterations: getIterations,\n    getEasing: getEasing,\n    getDuration: getDuration,\n    afterAddRead: afterAddRead,\n    afterAddWrite: afterAddWrite,\n    afterClearStyles: afterClearStyles,\n    afterStyles: afterStyles,\n    afterRemoveClass: afterRemoveClass,\n    afterAddClass: afterAddClass,\n    beforeAddRead: beforeAddRead,\n    beforeAddWrite: beforeAddWrite,\n    beforeClearStyles: beforeClearStyles,\n    beforeStyles: beforeStyles,\n    beforeRemoveClass: beforeRemoveClass,\n    beforeAddClass: beforeAddClass,\n    onFinish: onFinish,\n    progressStart: progressStart,\n    progressStep: progressStep,\n    progressEnd: progressEnd\n  };\n};\n\nexport { createAnimation as c };","map":null,"metadata":{},"sourceType":"module"}